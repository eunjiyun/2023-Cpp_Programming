//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" };


	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};


	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}
//eof end of file
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};


	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;

	in.close();//여기서 닫을 필요가 없다.
}
//eof end of file
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.


	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;

}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
#include<chrono>//cpp에서 시간을 다룰 때는 이 라이브러리를 사용
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.


	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;

}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
#include<chrono>//cpp에서 시간을 다룰 때는 이 라이브러리를 사용
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now=chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다.

	cout << "저장한 시간 : " << now << endl;

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;

	//return 0;// 이건 표준 스타일이 아니므로 cpp에서 쓰면 안 된다.
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
#include<chrono>//cpp에서 시간을 다룰 때는 이 라이브러리를 사용
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now=chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다.

	cout << "저장한 시간 : " << now +9h<< endl;

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
#include<chrono>//cpp에서 시간을 다룰 때는 이 라이브러리를 사용
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now=chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다.
	using namespace std::chrono_literals;//그리니치 천문대 기준으로부터 9h를 더할 수 있다.
	cout << "저장한 시간 : " << now +9h<< endl;

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}



=====================================================
저장한 시간 : 2023-09-07 16:19:48.2451013
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
#include<chrono>//cpp에서 시간을 다룰 때는 이 라이브러리를 사용
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now=chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다.
	using namespace std::chrono_literals;//그리니치 천문대 기준으로부터 9h를 더할 수 있다.
	
	out << '\n' << '\n';
	out << "=====================================================" << '\n';
	out << "저장한 시간 : " << now +9h<< endl;
	out << "=====================================================" << '\n';
	out << '\n';

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}



=====================================================
저장한 시간 : 2023-09-07 목요일 오후 4:29:11
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
#include<chrono>//cpp에서 시간을 다룰 때는 이 라이브러리를 사용
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now=chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다. //현재 time_point를 얻는다.
	auto utc=chrono::system_clock::to_time_t(now);//UTC시간으로 변경
	auto lt=localtime(&utc);//지역 달력시간으로 변경
	auto old = out.imbue(locale("ko_KR"));//로켈이라고 읽는데 출력스트림을 대한민국으로
	
	out << '\n' << '\n';
	out << "=====================================================" << '\n';
	out << "저장한 시간 : " << put_time(lt,"%x %A %X") << endl;
	out << "=====================================================" << '\n';
	out << '\n';

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}



=====================================================
저장한 시간 : 2023-09-07 목요일 오후 4:32:32
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가?
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
#include<chrono>//cpp에서 시간을 다룰 때는 이 라이브러리를 사용
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now=chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다. //현재 time_point를 얻는다.
	auto utc=chrono::system_clock::to_time_t(now);//UTC시간으로 변경

	//localtime은 인자로 메모리 블럭을 받는데 시작 번지만 받아온다. 해킹의 온상이 되는 코드 -sdl 검사 아니요
	auto lt=localtime(&utc);//지역 달력시간으로 변경

	auto old = out.imbue(locale("ko_KR"));//로켈이라고 읽는데 출력스트림을 대한민국으로

	out << '\n' << '\n';
	out << "=====================================================" << '\n';
	out << "저장한 시간 : " << put_time(lt,"%x %A %X") << endl;
	out << "=====================================================" << '\n';
	out << '\n';

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}



=====================================================
저장한 시간 : 2023-09-07 목요일 오후 4:34:30
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 한 학기 강의를 저장할 수 있는 코드 작성
// -소스.cpp 파일의 모든 글자를 읽을 수 있다.
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가? , 모두의 cpp, cppreference
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>//파일을 읽고 쓰려면 이걸 포함해야
#include<chrono>//cpp에서 시간을 다룰 때는 이 라이브러리를 사용
using namespace std;

int main()
{//main 괄호는 여기서 연다. 구글 코딩 스타일, 언리얼 코딩 스타일을 검색
	ifstream in{ "소스.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app};//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now=chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다. //현재 time_point를 얻는다.
	auto utc=chrono::system_clock::to_time_t(now);//UTC시간으로 변경

	//localtime은 인자로 메모리 블럭을 받는데 시작 번지만 받아온다. 해킹의 온상이 되는 코드 -sdl 검사 아니요
	auto lt=localtime(&utc);//지역 달력시간으로 변경

	auto old = out.imbue(locale("ko_KR"));//로켈이라고 읽는데 출력스트림을 대한민국으로

	out << '\n' << '\n';
	out << "=====================================================" << '\n';
	out << "저장한 시간 : " << put_time(lt,"%x %A %X") << endl;
	out << "=====================================================" << '\n';
	out << '\n';

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}
//eof end of file


=====================================================
저장한 시간 : 2023-09-07 목요일 오후 4:58:28
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// save 코드를 파일로 분리
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가? , 모두의 cpp, cppreference
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"//선언문이 들어가기에 가장 적합

int main()
{
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-07 목요일 오후 4:59:42
=====================================================

//----------------------------------------------------------------------------------------------------------------------------------
//save.cpp 한 학기 강의를 저장한다
// 
// 2023. 9. 7
//----------------------------------------------------------------------------------------------------------------------------------

#include "save.h"

void save(const std::string&)
{
	ifstream in{ "save.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app };//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now = chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다. //현재 time_point를 얻는다.
	auto utc = chrono::system_clock::to_time_t(now);//UTC시간으로 변경

	//localtime은 인자로 메모리 블럭을 받는데 시작 번지만 받아온다. 해킹의 온상이 되는 코드 -sdl 검사 아니요
	auto lt = localtime(&utc);//지역 달력시간으로 변경

	auto old = out.imbue(locale("ko_KR"));//로켈이라고 읽는데 출력스트림을 대한민국으로

	out << '\n' << '\n';
	out << "=====================================================" << '\n';
	out << "저장한 시간 : " << put_time(lt, "%x %A %X") << endl;
	out << "=====================================================" << '\n';
	out << '\n';
	out.imbue(old);

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}

=====================================================
저장한 시간 : 2023-09-07 목요일 오후 4:59:42
=====================================================

//----------------------------------------------------------------------------------------------------------------------------------
//save.cpp 한 학기 강의를 저장한다
// 
// 2023. 9. 7
//----------------------------------------------------------------------------------------------------------------------------------

#include "save.h"

void save(const std::string&)
{
	ifstream in{ "save.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app };//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now = chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다. //현재 time_point를 얻는다.
	auto utc = chrono::system_clock::to_time_t(now);//UTC시간으로 변경

	//localtime은 인자로 메모리 블럭을 받는데 시작 번지만 받아온다. 해킹의 온상이 되는 코드 -sdl 검사 아니요
	auto lt = localtime(&utc);//지역 달력시간으로 변경

	auto old = out.imbue(locale("ko_KR"));//로켈이라고 읽는데 출력스트림을 대한민국으로

	out << '\n' << '\n';
	out << "=====================================================" << '\n';
	out << "저장한 시간 : " << put_time(lt, "%x %A %X") << endl;
	out << "=====================================================" << '\n';
	out << '\n';
	out.imbue(old);

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}

=====================================================
저장한 시간 : 2023-09-07 목요일 오후 4:59:42
=====================================================

//----------------------------------------------------------------------------------------------------------------------------------
//save.cpp 한 학기 강의를 저장한다
// 
// 2023. 9. 7
//----------------------------------------------------------------------------------------------------------------------------------

#include "save.h"

void save(const std::string&)
{
	ifstream in{ "save.cpp" };//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app };//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now = chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다. //현재 time_point를 얻는다.
	auto utc = chrono::system_clock::to_time_t(now);//UTC시간으로 변경

	//localtime은 인자로 메모리 블럭을 받는데 시작 번지만 받아온다. 해킹의 온상이 되는 코드 -sdl 검사 아니요
	auto lt = localtime(&utc);//지역 달력시간으로 변경

	auto old = out.imbue(locale("ko_KR"));//로켈이라고 읽는데 출력스트림을 대한민국으로

	out << '\n' << '\n';
	out << "=====================================================" << '\n';
	out << "저장한 시간 : " << put_time(lt, "%x %A %X") << endl;
	out << "=====================================================" << '\n';
	out << '\n';
	out.imbue(old);

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}

=====================================================
저장한 시간 : 2023-09-07 목요일 오후 5:07:16
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// save 코드를 파일로 분리
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가? , 모두의 cpp, cppreference
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"//선언문이 들어가기에 가장 적합

int main()
{
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}


=====================================================
저장한 시간 : 2023-09-07 목요일 오후 5:10:38
=====================================================

//-----------------------------------------------------------------------------------------
// save.h - 한 학기 강의를 저장하는 코드
// 
// 2023. 9. 7
//-----------------------------------------------------------------------------------------

#pragma once
//#include<iostream>
//#include<string>
//#include<fstream>
//#include<chrono>
//using namespace std;
void save(const std::string&);//const char*는 cpp에서 사용하지x => string을 사용

=====================================================
저장한 시간 : 2023-09-07 목요일 오후 5:10:38
=====================================================

//----------------------------------------------------------------------------------------------------------------------------------
//save.cpp 한 학기 강의를 저장한다
// 
// 2023. 9. 7
//----------------------------------------------------------------------------------------------------------------------------------

//#include "save.h"
#include<string>
#include<fstream>
#include<chrono>
using namespace std;

//------------------------------------
void save(const std::string& fileName)
//------------------------------------
{
	ifstream in{ fileName};//읽을 파일을 연다. -RAII C++의 자원 관리 기법이 있어서 닫을 필요가 없다.
	ofstream out{ "2023-2 cpp.txt" ,ios::app };//두 번째 인자에 1을 넣어도 되지만 의미를 알 수 없는 숫자를 쓰는 것은 지양해야 한다.

	auto now = chrono::system_clock::now();//epock 1초에 숫자가 하나씩 늘어난다. 숫자를 리턴 받을 수 있다. //현재 time_point를 얻는다.
	auto utc = chrono::system_clock::to_time_t(now);//UTC시간으로 변경

	//localtime은 인자로 메모리 블럭을 받는데 시작 번지만 받아온다. 해킹의 온상이 되는 코드 -sdl 검사 아니요
	auto lt = localtime(&utc);//지역 달력시간으로 변경

	auto old = out.imbue(locale("ko_KR"));//로켈이라고 읽는데 출력스트림을 대한민국으로

	out << '\n' << '\n';
	out << "=====================================================" << '\n';
	out << "저장한 시간 : " << put_time(lt, "%x %A %X") << endl;
	out << "=====================================================" << '\n';
	out << '\n';
	out.imbue(old);

	char c;

	in >> noskipws;//white space도 읽어야 - space, enter, tab
	while (in >> c)
		out << c;
}

=====================================================
저장한 시간 : 2023-09-07 목요일 오후 5:10:38
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// save 코드를 파일로 분리
// ------------------------------------------------------------------------------
// 과제 - C++ 코딩 컨벤션이란 무엇인가? , 모두의 cpp, cppreference
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"//선언문이 들어가기에 가장 적합

int main()
{
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-07 목요일 오후 5:15:48
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// C++ 입출력
// ------------------------------------------------------------------------------
// 과제 - C++ 입출력 관련 내용 알아보기
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>//cin, cout, cerr, clog - 자동 생성
#include "save.h"

int main()
{
	std::cerr << "안녕?" << '\n';//error가 난 상황에 스트림이 이 쪽으로 흘러가게끔

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-07 목요일 오후 5:17:18
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// C++ 입출력
// ------------------------------------------------------------------------------
// 과제 - C++ 입출력 관련 내용 알아보기
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>//cin, cout, cerr, clog - 자동 생성
#include "save.h"

int main()
{
	// <<추출자
	std::cout<< "안녕?" << '\n';//출력 전담 객체

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-07 목요일 오후 5:19:27
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// C++ 입출력
// ------------------------------------------------------------------------------
// 과제 - C++ 입출력 관련 내용 알아보기
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>//cin, cout, cerr, clog - 자동 생성
#include "save.h"

int main()
{
	//구구단 2단
	std::cout << 2 << " x " << 1 << " = " << 2 * 1 << '\n';
	std::cout << 2 << " x " << 2 << " = " << 2 * 2 << '\n';
	std::cout << 2 << " x " << 3 << " = " << 2 * 3 << '\n';
	std::cout << 2 << " x " << 4 << " = " << 2 * 4 << '\n';
	std::cout << 2 << " x " << 5 << " = " << 2 * 5 << '\n';
	std::cout << 2 << " x " << 6 << " = " << 2 * 6 << '\n';
	std::cout << 2 << " x " << 7 << " = " << 2 * 7 << '\n';
	std::cout << 2 << " x " << 8 << " = " << 2 * 8 << '\n';
	std::cout << 2 << " x " << 9 << " = " << 2 * 9 << '\n';

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-07 목요일 오후 5:20:24
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.07 (1주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// C++ 입출력
// ------------------------------------------------------------------------------
// 과제 - C++ 입출력 관련 내용 알아보기
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>//cin, cout, cerr, clog - 자동 생성
#include "save.h"

int main()
{
	//구구단 2단
	for (int 변수 = 1; 변수 <= 9; ++변수) {
		std::cout << 2 << " x " << 변수 << " = " << 2 * 변수 << '\n';
	}
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 3:49:01
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n;//메모리를 sizeof(int)만큼 주세요. 나는 이름 n으로 access

	cout << "n의 크기 - " << sizeof n << endl;
	cout << "n의 주소 - " << addressof(n) << endl;
	cout << "n의 자료형 - " << typeid(n).name() << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 3:53:21
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n;//메모리를 sizeof(int)만큼 주세요. 나는 이름 n으로 access

	cout << "n의 크기 - " << sizeof cout << endl;
	cout << "n의 주소 - " << addressof(cout) << endl;
	cout << "n의 자료형 - " << typeid(cout).name() << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 3:55:19
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n;//메모리를 sizeof(int)만큼 주세요. 나는 이름 n으로 access

	cout << "main의 주소 - " << addressof(main) << endl;
	cout << "main의 자료형 - " << typeid(main).name() << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 3:57:51
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main(int,char*)//표준
{
	int n;//메모리를 sizeof(int)만큼 주세요. 나는 이름 n으로 access

	cout << "main의 주소 - " << addressof(main) << endl;
	cout << "main의 자료형 - " << typeid(main).name() << endl;

	save("소스.cpp");

	return 0;//c++표준에 이 문장을 쓰라는 말이 없다. 쓰지 않는게 좋다.
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 3:58:38
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n;//메모리를 sizeof(int)만큼 주세요. 나는 이름 n으로 access

	cout << "main의 주소 - " << addressof(main) << endl;
	cout << "save의 주소 - " << addressof(save) << endl;

	save("소스.cpp");

}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 3:59:20
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n;//메모리를 sizeof(int)만큼 주세요. 나는 이름 n으로 access

	cout << "n의 주소 - " << addressof(n) << endl;
	cout << "main의 주소 - " << addressof(main) << endl;
	cout << "save의 주소 - " << addressof(save) << endl;

	save("소스.cpp");

}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:06:29
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n=0B0111111'11111111'111111111'11111111;//메모리를 sizeof(int)만큼 주세요. 나는 이름 n으로 access

	//[문제] n이 가질 수 있는 최댓값을 출력하라.
	cout << "n이 가질 수 있는 최대값 : " << n<< endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:10:31
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n; //메모리를 sizeof(int)만큼 주세요. 나는 이름 n으로 access

	//[문제] n이 가질 수 있는 최솟값을 출력하라.
	n = 0B0111111'11111111'111111111'11111111;
	n += 1;
	cout << "n이 가질 수 있는 최솟값 : " << n<< endl;
	cout << "n이 가질 수 있는 최솟값 : " << INT_MIN<< endl;

	save("소스.cpp");
}




=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:11:44
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n; //메모리를 sizeof(int)만큼 주세요. 나는 이름 n으로 access

	//[문제] n이 가질 수 있는 최솟값을 출력하라.
	n = 0x7FFFFFFF;
	n += 1;
	cout << "n이 가질 수 있는 최솟값 : " << n<< endl;
	cout << "n이 가질 수 있는 최솟값 : " << INT_MIN<< endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:14:42
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n; 

	//[문제] n이 가질 수 있는 최댓값을 출력하라.
	n = numeric_limits<int>::max();
	cout << n << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:22:15
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int n = 123;//n을 초기화 - initialization

	n = 123;//assignment - 대입, 배정, 할당

	cout << n << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:47:56
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int a[10]{1,3,5,7,9,2,4,6,8,10};//초기화는 {}이 기호를 써서 한다.

	//contiguous (memory) 공간의 연속
	//continuous 시간의 연속

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:52:33
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int a[10]{1,3,5,7,9,2,4,6,8,10};//초기화는 {}이 기호를 써서 한다.

	//[문제] a의 모든 값을 출력하라.
	cout << a[0] << '\n';
	cout << a[1] << '\n';
	cout << a[2] << '\n';
	cout << a[3] << '\n';
	cout << a[4] << '\n';
	cout << a[5] << '\n';
	cout << a[6] << '\n';
	cout << a[7] << '\n';
	cout << a[8] << '\n';
	cout << a[9] << '\n';

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:54:34
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int a[10]{1,3,5,7,9,2,4,6,8,10};//초기화는 {}이 기호를 써서 한다.

	//[문제] a의 모든 값을 출력하라.
	for (int i=0; i < 10; ++i)//10개가 끝인지 알 수 없으므로 좋은 코드가 아니다.
		cout << a[i] << '\n';

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:55:14
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int a[10]{1,3,5,7,9,2,4,6,8,10};//초기화는 {}이 기호를 써서 한다.

	//[문제] a의 모든 값을 출력하라.
	for(int i=0;i<sizeof(a)/(sizeof(int));++i)
		cout << a[i] << '\n';

	save("소스.cpp");
}




=====================================================
저장한 시간 : 2023-09-14 목요일 오후 4:56:01
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int a[100]{1,3,5,7,9,2,4,6,8,10};//초기화는 {}이 기호를 써서 한다.

	//[문제] a의 모든 값을 출력하라.
	for (int i = 0; i < sizeof(a) / (sizeof(a[0])); ++i)
		cout << a[i] << " ";

	save("소스.cpp");
}




=====================================================
저장한 시간 : 2023-09-14 목요일 오후 5:00:08
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int a[100]{1,3,5,7,9,2,4,6,8,10};//초기화는 {}이 기호를 써서 한다.

	//[문제] a의 모든 값을 출력하라.

	for (int number:a)//:는 in이라는 뜻이고 a에 들어있다는 뜻 //range-based for, range-for
		cout << number << " ";
	//이 코드가 좋은 이유는 배열의 크기와 같은 소스 코드의 요구 조건의 변경 사항이 있더라도 바꾸지 않아도 되고,
	//유지 보수에 좋다.



	save("소스.cpp");
}







=====================================================
저장한 시간 : 2023-09-14 목요일 오후 5:18:12
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.14 (2주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// int n;
// ------------------------------------------------------------------------------
// 과제 - 다른 자료형으로 강의 내용을 반복해본다.
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
//앞에서 일어난 사건과 뒤에서 일어난 사건의 연관이 없는 것을 랜덤이라고 부른다.
//뒤에 나오는 사건이 독립적이며 예측이 불가능 하다. 
//rand()함수는 예측이 가능하므로 랜덤이 아니다.
//rand()함수는 16bit로 이루어진 구시대적 유물이다. 해킹 가능성도 높다.
#include<random>//랜덤값을 사용하려면...
#include<format>
#include "save.h"
using namespace std;

default_random_engine dre;//랜덤값을 생성하는 엔진
uniform_int_distribution uid(1, 999);//랜덤값의 분포를 조작

int main()
{
	int a[200];

	for (int i = 0; i < 200; ++i)
		a[i] = uid(dre);

	for (int number : a)
		cout << format("{:4d}",number);
	cout << '\n';
	

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-21 목요일 오후 4:14:51
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (3주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 랜덤값 생성하고 이용하기
// ------------------------------------------------------------------------------
// 9.28 목요일 (4주 2일) - 온라인 강의로 대체
// 10.26목요일(8주 2일) - 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 많은 수의 int값이 있다면 너는 어떤 일을 하고 싶으니?
//----------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;

default_random_engine dre;//랜덤값을 생성하는 엔진
uniform_int_distribution uid(1, 999);//랜덤값의 분포를 조작

int main()
{
	int a[2000];

	for (int i = 0; i < 2000; ++i)
		a[i] = uid(dre);

	for (int number : a)
		cout << format("{:4d}",number);
	cout << '\n';

	//[문제] 가장 큰 값을 찾아 화면에 출력하라. //=>시험 문제는 이런식으로: c++을 8주간 수강한 감상, 논술문제가 나올 수
	// 출력된 답도 답지에 써라.

	int max{ numeric_limits<int>::min()};
	for (int num : a)
		if (max < num)
			max = num;
	cout << "max : " << max << '\n';
	

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-21 목요일 오후 4:15:11
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (3주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 랜덤값 생성하고 이용하기
// ------------------------------------------------------------------------------
// 9.28 목요일 (4주 2일) - 온라인 강의로 대체
// 10.26목요일(8주 2일) - 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 많은 수의 int값이 있다면 너는 어떤 일을 하고 싶으니?
//----------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;

default_random_engine dre;//랜덤값을 생성하는 엔진
uniform_int_distribution uid(1, 999);//랜덤값의 분포를 조작

int main()
{
	int a[2000];

	for (int i = 0; i < 2000; ++i)
		a[i] = uid(dre);

	for (int number : a)
		cout << format("{:4d}",number);
	cout << '\n';

	//[문제] 가장 큰 값을 찾아 화면에 출력하라. //=>시험 문제는 이런식으로: c++을 8주간 수강한 감상, 논술문제가 나올 수
	// 출력된 답도 답지에 써라.

	int max{ a[0]};
	for (int num : a)
		if (max < num)
			max = num;
	cout << "max : " << max << '\n';
	

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-21 목요일 오후 5:11:18
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (3주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 랜덤값 생성하고 이용하기
// ------------------------------------------------------------------------------
// 9.28 목요일 (4주 2일) - 온라인 강의로 대체
// 10.26목요일(8주 2일) - 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 많은 수의 int값이 있다면 너는 어떤 일을 하고 싶으니?
//----------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;// 이걸 쓰면 안 되는 이유를 적으시오. - 이런 시험문제가 나온다.

//[문제] 주사위를 1000번 던져 나오는 값의 횟수와 확률을 출력하라 - 시험 문제일 수 있다.
//1 - 160, 16.0% //무조건 이 형식으로 쓰지 않으면 감점한다.
//2 - 
//6 - 172, 17.2%

default_random_engine dre;
uniform_int_distribution uid{ 1,6 };

int main()
{
	int num1{}, num2{}, num3{}, num4{}, num5{}, num6{};//이렇게 답지에 내면 0점=>초기화{}해야한다.
	for(int i{};i<1000;++i)
	{
		int val = uid(dre);

		if (1 == val)
			num1++;
		else if (2== val)
			num2++;
		else if (3 == val)
			num3++;
		else if (4 == val)
			num4++;
		else if (5 == val)
			num5++;
		else if (6== val)
			num6++;
	}

	//1-160 , 16.0%
	cout << 1 << " - " << num1 << ", " << num1 /(float) 10 << "%" << '\n';

	

	//// 결과를 출력합니다.
	//cout << "주사위 던지기 결과 (1부터 6까지의 값):" << endl;
	//for (int i{}; i < 6; ++i) {
	//	double probability = static_cast<double>(counts[i]) / 1000;
	//	cout << "값 " << (i + 1) << ": " << counts[i] << "번 (확률: " << (probability * 100) << "%)" << endl;
	//}

	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-21 목요일 오후 5:11:47
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (3주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 랜덤값 생성하고 이용하기
// ------------------------------------------------------------------------------
// 9.28 목요일 (4주 2일) - 온라인 강의로 대체
// 10.26목요일(8주 2일) - 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 많은 수의 int값이 있다면 너는 어떤 일을 하고 싶으니?
//----------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;// 이걸 쓰면 안 되는 이유를 적으시오. - 이런 시험문제가 나온다.

//[문제] 주사위를 1000번 던져 나오는 값의 횟수와 확률을 출력하라 - 시험 문제일 수 있다.
//1 - 160, 16.0% //무조건 이 형식으로 쓰지 않으면 감점한다.
//2 - 
//6 - 172, 17.2%

default_random_engine dre;
uniform_int_distribution uid{ 1,6 };

int main()
{
	int num1{}, num2{}, num3{}, num4{}, num5{}, num6{};//이렇게 답지에 내면 0점=>초기화{}해야한다.
	for(int i{};i<1000;++i)
	{
		int val = uid(dre);

		if (1 == val)
			num1++;
		else if (2== val)
			num2++;
		else if (3 == val)
			num3++;
		else if (4 == val)
			num4++;
		else if (5 == val)
			num5++;
		else if (6== val)
			num6++;
	}

	//1-160 , 16.0%
	cout << 1 << " - " << num1 << ", " << num1 /static_cast<float>(10)<< "%" << '\n';

	

	//// 결과를 출력합니다.
	//cout << "주사위 던지기 결과 (1부터 6까지의 값):" << endl;
	//for (int i{}; i < 6; ++i) {
	//	double probability = static_cast<double>(counts[i]) / 1000;
	//	cout << "값 " << (i + 1) << ": " << counts[i] << "번 (확률: " << (probability * 100) << "%)" << endl;
	//}

	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-21 목요일 오후 5:17:03
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (3주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 랜덤값 생성하고 이용하기
// ------------------------------------------------------------------------------
// 9.28 목요일 (4주 2일) - 온라인 강의로 대체
// 10.26목요일(8주 2일) - 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 많은 수의 int값이 있다면 너는 어떤 일을 하고 싶으니?
//----------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;// 이걸 쓰면 안 되는 이유를 적으시오. - 이런 시험문제가 나온다.

//[문제] 주사위를 1000번 던져 나오는 값의 횟수와 확률을 출력하라 - 시험 문제일 수 있다.
//1 - 160, 16.0% //무조건 이 형식으로 쓰지 않으면 감점한다.
//2 - 
//6 - 172, 17.2%

default_random_engine dre;
uniform_int_distribution uid{ 1,6 };

int main()
{
	int num1{}, num2{}, num3{}, num4{}, num5{}, num6{};//이렇게 답지에 내면 0점=>초기화{}해야한다.
	for(int i{};i<1000;++i)
	{
		int val = uid(dre);

		if (1 == val)
			num1++;
		else if (2== val)
			num2++;
		else if (3 == val)
			num3++;
		else if (4 == val)
			num4++;
		else if (5 == val)
			num5++;
		else if (6== val)
			num6++;
	}

	//1-160 , 16.0%
	cout << 1 << " - " << num1 << ", " <<format("{:2.1f}", num1 / static_cast<float>(10)) << "%" << '\n';
	//(float)이런식으로 하면 대규모의 코딩을 할 때 변경이 어려워지지만
	

	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-21 목요일 오후 5:19:43
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (3주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 랜덤값 생성하고 이용하기
// ------------------------------------------------------------------------------
// 9.28 목요일 (4주 2일) - 온라인 강의로 대체
// 10.26목요일(8주 2일) - 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 많은 수의 int값이 있다면 너는 어떤 일을 하고 싶으니?
//----------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;// 이걸 쓰면 안 되는 이유를 적으시오. - 이런 시험문제가 나온다.

//[문제] 주사위를 1000번 던져 나오는 값의 횟수와 확률을 출력하라 - 시험 문제일 수 있다.
//1 - 160, 16.0% //무조건 이 형식으로 쓰지 않으면 감점한다.
//2 - 
//6 - 172, 17.2%

default_random_engine dre;
uniform_int_distribution uid{ 1,6 };

int main()
{
	int num[6]{};
	for(int i{};i<1000;++i)
		++num[uid(dre) - 1];

	//rand함수 쓰면 0점 처리
	for (int i{}; i < 6; ++i)
	{
		cout << 1 << " - " << num[i] << endl;
		cout << 1 << " - " << num[i] << ", " << format("{:2.1f}", num[i] / static_cast<float>(10)) << "%" << '\n';
	}

	//1-160 , 16.0%
	//cout << 1 << " - " << num1 << ", " <<format("{:2.1f}", num1 / static_cast<float>(10)) << "%" << '\n';
	//(float)이런식으로 하면 대규모의 코딩을 할 때 변경이 어려워지지만
	

	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 5:27:07
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 랜덤값 생성하고 이용하기
// ------------------------------------------------------------------------------
// 9.28 목요일 (4주 2일) - 온라인 강의로 대체
// 10.26목요일(8주 2일) - 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 많은 수의 int값이 있다면 너는 어떤 일을 하고 싶으니?
//----------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;// 이걸 쓰면 안 되는 이유를 적으시오. - 이런 시험문제가 나온다.

//[문제] 주사위를 1000번 던져 나오는 값의 횟수와 확률을 출력하라 - 시험 문제일 수 있다.
//1 - 160, 16.0% //무조건 이 형식으로 쓰지 않으면 감점한다.
//2 - 
//6 - 172, 17.2%

default_random_engine dre;
uniform_int_distribution uid{ 1,6 };

int main()
{
	int num[6]{};
	for(int i{};i<1000;++i)
		++num[uid(dre) - 1];

	//rand함수 쓰면 0점 처리
	for (int i{}; i < 6; ++i)
	{
		cout << 1 << " - " << num[i] << endl;
		cout << 1 << " - " << num[i] << ", " << format("{:2.1f}", num[i] / static_cast<float>(10)) << "%" << '\n';
	}

	//1-160 , 16.0%
	//cout << 1 << " - " << num1 << ", " <<format("{:2.1f}", num1 / static_cast<float>(10)) << "%" << '\n';
	//(float)이런식으로 하면 대규모의 코딩을 할 때 변경이 어려워지지만
	

	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 5:39:45
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//----------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int num{ 333};//global

int main()
{
	{
		int num{ 100 };//local 
		cout << ::num << '\n';
	}
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 5:41:25
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//----------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int gn;

int main()
{
	int n;
	cout << "gn : " << gn << endl;
	cout << "n : " << n << endl;
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 5:42:32
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//----------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int gn;//전역 변수 메모리를 확보하게 되면 모든 bit를 0으로 클리어 해주겠다.

int main()
{
	int n;//쓰레기 값으로 표현x 그 만큼의 메모리가 있는거야.
	cout << "gn : " << gn << endl;
	cout << "n : " << n << endl;
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 5:45:04
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//----------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int gn1;
int gn2;

int main()
{
	int n1;
	int n2;

	//[문제] 주소를 출력하라.

	cout << "&gn1 : " << &gn1 << endl;
	cout << "&gn2 : " << &gn2 << endl;
	cout << "&n1 : " << &n1 << endl;
	cout << "&n2 : " << &n2 << endl;
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 5:46:56
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.21 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//----------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int gn1;
int gn2;

int main()
{
	int n1;
	int n2;

	//[문제] 주소를 출력하라.

	cout << "&gn1 : " << addressof(gn1) << endl;
	cout << "&gn2 : " << addressof(gn2) << endl;
	cout << "&n1 : " << addressof(n1) << endl;
	cout << "&n2 : " << addressof(n2) << endl;
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 6:07:34
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//----------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int gn;


int main()
{
	int n;

	//[문제] 주소를 출력하라.
	cout << "지역 변수가 사는 곳 STACK - " << addressof(n) << endl;
	cout << "전역 변수가 사는 곳 DATA - " << addressof(gn) << endl;
	cout << "함수가 사는 곳 CODE - " << addressof(main) << endl;
	cout << "함수가 사는 곳 CODE - " << addressof(save) << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 6:17:27
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int num[0x70ffffff / 4]{};

	//[문제] 지역에서 int는 몇 개까지 사용할 수 있나?
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 6:17:50
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int num[0x70ffffff / 4]{};

	//[문제] 지역에서 int는 몇 개까지 사용할 수 있나?

	cout << "실행 되고 있다" << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 6:18:38
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int num[0x70fff0ff / 4]{};

	//[문제] 지역에서 int는 몇 개까지 사용할 수 있나?

	cout << "실행 되고 있다" << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 6:34:11
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	const int NUM{ 25'1000 };
	int num[NUM]{};//0x7f0fffff / 4   or 5억개 사용? 1MB까지 쓸 수 있다. 250000*4=1'000'000

	cout << num[0] << endl;
	cout << num[NUM-1] << endl;

	//[문제] 지역에서 int는 몇 개까지 사용할 수 있나?

	cout << "실행 되고 있다" << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-09-27 수요일 오후 6:42:33
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (4주 2일)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 변수(Object)와 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free store
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	//STACK의 용도 - 함수의 인자 전달, 리턴값 전달, 함수의 현 상태 저장

	printf(" 이건 C++에서 쓰지 말자\n");

	cout << "이 문장은 언제 나오나?" << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-04 수요일 오후 5:47:21
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (5주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int num[]{ 10,4,8,2,1,5,9,6,7,3 };

	//다음시간
	//[문제] num를 (값) 오름차순(ascending order)으로 정렬(sorting)한 후 출력한다.

	for (int i{}; i < 10 - 1; ++i) {
		if (num[i] > num[i + 1]) {
			int temp{ num[i] };
			num[i] = num[i + 1];
			num[i + 1] = temp;
		}
	}


	for (int num : num)
		cout << num << ' ';
	cout << '\n';

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-04 수요일 오후 5:49:15
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (5주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int num[]{ 10,4,8,2,1,5,9,6,7,3 };

	cout << "원래 값 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;

	//다음시간
	//[문제] num를 (값) 오름차순(ascending order)으로 정렬(sorting)한 후 출력한다.

	for (int i{}; i < 10 - 1; ++i) {
		if (num[i] > num[i + 1]) {
			int temp{ num[i] };
			num[i] = num[i + 1];
			num[i + 1] = temp;
		}
	}


	cout << "이동 후 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-04 수요일 오후 5:49:28
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (5주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int num[]{ 10,4,8,2,1,5,9,6,7,3 };

	cout << "원래 값 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;

	//다음시간
	//[문제] num를 (값) 오름차순(ascending order)으로 정렬(sorting)한 후 출력한다.

	for (int i{}; i < 10 - 1; ++i) {
		if (num[i] > num[i + 1]) {
			int temp{ num[i] };
			num[i] = num[i + 1];
			num[i + 1] = temp;
		}
	}


	cout << "이동 후 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-04 수요일 오후 6:18:14
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (5주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1,99'999 };

//[문제] NUM개 만큼의 int를 저장할 공간을 확보한다.
//값을 {1, 99'999} 랜덤 값으로 설정하라
//오름차순으로 정렬하라.
//결과를 출력하라.

const int NUM{ 10'000 };//#define쓰면 안됩니다.

int main()
{
	int num[NUM];

	for (int& a:num)//숫자에서 완전히 자유로워진 코딩
		a = uid(dre);
	
	cout << "원래 값 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;

	//다음시간
	//[문제] num를 (값) 오름차순(descending order)으로 정렬(sorting)한 후 출력한다.
	cout << "정렬하는 중...";
	
	for(int j{};j<NUM-1;++j)
		for (int i{}; i < NUM - 1-j; ++i) {
			if (num[i] > num[i + 1]) {
				int temp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = temp;

			}
		}
		cout << endl;


	cout << "이동 후 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-04 수요일 오후 6:30:56
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (5주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1,99'999 };

//[문제] NUM개 만큼의 int를 저장할 공간을 확보한다.
//값을 {1, 99'999} 랜덤 값으로 설정하라
//오름차순으로 정렬하라.
//결과를 출력하라.

const int NUM{ 20'0000 };//#define쓰면 안됩니다.
int num[NUM];

int main()
{
	

	for (int& a:num)//숫자에서 완전히 자유로워진 코딩
		a = uid(dre);
	
	/*cout << "원래 값 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;*/

	//다음시간
	//[문제] num를 (값) 오름차순(descending order)으로 정렬(sorting)한 후 출력한다.
	cout << "정렬하는 중...";
	
	for (int j{}; j < NUM - 1; ++j) {
		for (int i{}; i < NUM - 1 - j; ++i) {
			if (num[i] > num[i + 1]) {
				int temp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = temp;

			}
		}
	}
		cout << endl;


	cout << "정렬 결과 - ";
	for (int n : num)
		cout << format("{:8d}",n) << ' ';
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-04 수요일 오후 7:02:10
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (5주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1,99'999 };

//[문제] NUM개 만큼의 int를 저장할 공간을 확보한다.
//값을 {1, 99'999} 랜덤 값으로 설정하라
//오름차순으로 정렬하라.
//결과를 출력하라.

const int NUM{ 1'0000 };//#define쓰면 안됩니다.
int num[NUM];

int main()
{
	

	for (int& a:num)//숫자에서 완전히 자유로워진 코딩
		a = uid(dre);
	
	/*cout << "원래 값 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;*/

	//다음시간
	//[문제] num를 (값) 오름차순(descending order)으로 정렬(sorting)한 후 출력한다.
	cout << "정렬하는 중...";

	int 판단함수(const void*, const void*);
	qsort(num, NUM, sizeof(int), 판단함수);
	
	for (int j{}; j < NUM - 1; ++j) {
		for (int i{}; i < NUM - 1 - j; ++i) {
			if (num[i] > num[i + 1]) {
				int temp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = temp;

			}
		}
	}
		cout << endl;


	cout << "정렬 결과 - ";
	for (int n : num)
		cout << format("{:8d}",n) << ' ';
	cout << endl;

	save("소스.cpp");
}

int 판단함수(const void* a, const void* b)
{
	
	return *(int*)a - *(int*)b;
}


=====================================================
저장한 시간 : 2023-10-04 수요일 오후 7:02:33
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (5주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1,99'999 };

//[문제] NUM개 만큼의 int를 저장할 공간을 확보한다.
//값을 {1, 99'999} 랜덤 값으로 설정하라
//오름차순으로 정렬하라.
//결과를 출력하라.

const int NUM{ 1'0000 };//#define쓰면 안됩니다.
int num[NUM];

int main()
{
	

	for (int& a:num)//숫자에서 완전히 자유로워진 코딩
		a = uid(dre);
	
	/*cout << "원래 값 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;*/

	//다음시간
	//[문제] num를 (값) 오름차순(descending order)으로 정렬(sorting)한 후 출력한다.
	cout << "정렬하는 중...";

	int 판단함수(const void*, const void*);
	qsort(num, NUM, sizeof(int), 판단함수);
	
	for (int j{}; j < NUM - 1; ++j) {
		for (int i{}; i < NUM - 1 - j; ++i) {
			if (num[i] > num[i + 1]) {
				int temp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = temp;

			}
		}
	}
		cout << endl;


	cout << "정렬 결과 - ";
	for (int n : num)
		cout << format("{:8d}",n) << ' ';
	cout << endl;

	save("소스.cpp");
}

int 판단함수(const void* a, const void* b)
{
	
	return *(int*)a - *(int*)b;//내림차순은 b-a
}


=====================================================
저장한 시간 : 2023-10-05 목요일 오후 4:03:48
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 09.27 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1,99'999 };

//[문제] NUM개 만큼의 int를 저장할 공간을 확보한다.
//값을 {1, 99'999} 랜덤 값으로 설정하라
//오름차순으로 정렬하라.
//결과를 출력하라.

const int NUM{ 1'0000 };//#define쓰면 안됩니다.
int num[NUM];

int main()//function call operator
{
	

	for (int& a:num)//숫자에서 완전히 자유로워진 코딩
		a = uid(dre);
	
	/*cout << "원래 값 - ";
	for (int n : num)
		cout << n << ' ';
	cout << endl;*/

	//다음시간
	//[문제] num를 (값) 오름차순(descending order)으로 정렬(sorting)한 후 출력한다.
	cout << "정렬하는 중...";

	qsort(num, NUM, sizeof(int), [](const void* a, const void* b) {return *(int*)a - *(int*)b; });
	
	for (int j{}; j < NUM - 1; ++j) {
		for (int i{}; i < NUM - 1 - j; ++i) {
			if (num[i] > num[i + 1]) {
				int temp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = temp;

			}
		}
	}
		cout << endl;


	cout << "정렬 결과 - ";
	for (int n : num)
		cout << format("{:8d}",n) << ' ';
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 4:07:42
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<format>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ 1,99'999 };

//[문제] NUM개 만큼의 int를 저장할 공간을 확보한다.
//값을 {1, 99'999} 랜덤 값으로 설정하라
//오름차순으로 정렬하라.
//결과를 출력하라.

const int NUM{ 1'0000 };//#define쓰면 안됩니다.
int num[NUM];

int main()//function call operator
{
	for (int& a:num)//숫자에서 완전히 자유로워진 코딩
		a = uid(dre);
	
	//다음시간
	//[문제] num를 (값) 오름차순(descending order)으로 정렬(sorting)한 후 출력한다.
	cout << "정렬하는 중...";

	qsort(num, NUM, sizeof(int), [](const void* a, const void* b) ->int/*int를 리턴한단 는 뜻*/{
		return *(int*)a - *(int*)b; //람다함수는 함수의 이름은 필요없고 기능만 필요한 경우에 사용
		});
	
	for (int j{}; j < NUM - 1; ++j) {
		for (int i{}; i < NUM - 1 - j; ++i) {
			if (num[i] > num[i + 1]) {
				int temp{ num[i] };
				num[i] = num[i + 1];
				num[i + 1] = temp;

			}
		}
	}
		cout << endl;

	cout << "정렬 결과 - ";
	for (int n : num)
		cout << format("{:8d}",n) << ' ';
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 4:08:54
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()//function call operator
{
	[]() {
		cout << "안녕? 난 람다라고 해!" << endl;
	};

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 4:10:39
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()//function call operator
{
	[]() {//이름 없는 람다 함수는 그 함수가 만들어질 때 딱 한 번 부를 수 있다.
		cout << "안녕? 난 람다라고 해!" << endl;
	};

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 4:11:03
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	[]() {//이름 없는 람다 함수는 그 함수가 만들어질 때 딱 한 번 부를 수 있다.
		cout << "안녕? 난 람다라고 해!" << endl;
	}();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 4:16:41
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	char p[]= "the quick brown fox jumps over the lazy dog";
	cout << p << endl;

	//***시험문제로 나올 수 있음
	//[문제] p를 오름차순으로 정렬하고 화면에 출력하라

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 4:36:23
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	char p[]= "the quick brown fox jumps over the lazy dog";
	cout << p+4<< endl;

	//qsort(p,43)43칸 이런식으로 적으면 0점처리

	//***시험문제로 나올 수 있음
	//[문제] p를 오름차순으로 정렬하고 화면에 출력하라

	/*qsort(p,sizeof(p),sizeof(char),
		[](){})*/

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 4:38:50
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 정렬(sorting) - 버블 소트(bubble sort)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 다양한 정렬 알고리즘을 살펴 본다
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	char p[]= "the quick brown fox jumps over the lazy dog";
	cout << p<< endl;

	//qsort(p,43)43칸 이런식으로 적으면 0점처리

	//***시험문제로 나올 수 있음
	//[문제] p를 오름차순으로 정렬하고 화면에 출력하라
	qsort(p, strlen(p), sizeof(char), [](const void* p, const void* q) {
		return *(char*)p - *(char*)q;
		});
	cout << p << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 5:06:23
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 실행 파일과 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 각 메모리 영역의 특성을 알아본다. (STACK, DATA, CODE, HEAP)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

char c[1'990'000'000];

int main()
{
	//***시험으로 나올 수 있음
	// [문제] 전역 데이터는 얼마까지 사용가능한가?
	cout << c[0] << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 5:08:14
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 실행 파일과 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 각 메모리 영역의 특성을 알아본다. (STACK, DATA, CODE, HEAP)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

char c[1'990'000'000];//이만큼의 메모리를 쓰고 있다면 실행파일의 크기가 2gb가 된다는 뜻

int main()
{
	//***시험으로 나올 수 있음
	// [문제] 전역 데이터는 얼마까지 사용가능한가?
	cout << c[0] << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 5:09:33
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 실행 파일과 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 각 메모리 영역의 특성을 알아본다. (STACK, DATA, CODE, HEAP)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

char c[1'990'000'000];//이만큼의 메모리를 쓰고 있다면 실행파일의 크기가 2gb가 된다는 뜻

int main()
{
	//***시험으로 나올 수 있음 -전역에 메모리를 썼는데 실행파일의 크기는 얼마나 되는가?
	// [문제] 전역 데이터는 얼마까지 사용가능한가?
	cout << c[0] << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 5:11:02
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 실행 파일과 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 각 메모리 영역의 특성을 알아본다. (STACK, DATA, CODE, HEAP)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

char c[1'990'000'000]{ 1,2,3,4 };//이만큼의 메모리를 쓰고 있다면 실행파일의 크기가 2gb가 된다는 뜻

int main()
{
	//***시험으로 나올 수 있음 -전역에 메모리를 썼는데 실행파일의 크기는 얼마나 되는가?
	// [문제] 전역 데이터는 얼마까지 사용가능한가?
	cout << c[0] << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 5:13:12
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 실행 파일과 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 각 메모리 영역의 특성을 알아본다. (STACK, DATA, CODE, HEAP)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

char c[1'990'000'000]{ 1,2,3,4 };//이만큼의 메모리를 쓰고 있다면 실행파일의 크기가 2gb가 된다는 뜻
//메모리의 모양을 저장해놓는 곳은 실행파일 밖에 없기 때문

int main()
{
	//***시험으로 나올 수 있음 -전역에 메모리를 썼는데 실행파일의 크기는 얼마나 되는가?
	// [문제] 전역 데이터는 얼마까지 사용가능한가?
	cout << c[0] << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-05 목요일 오후 5:14:29
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.05 (5주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 실행 파일과 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 각 메모리 영역의 특성을 알아본다. (STACK, DATA, CODE, HEAP)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

char c[1'990'000'000]{ 'a',2,3,4};//이만큼의 메모리를 쓰고 있다면 실행파일의 크기가 2gb가 된다는 뜻
//메모리의 모양을 저장해놓는 곳은 실행파일 밖에 없기 때문

int main()
{
	//***시험으로 나올 수 있음 -전역에 메모리를 썼는데 실행파일의 크기는 얼마나 되는가?
	// [문제] 전역 데이터는 얼마까지 사용가능한가?
	cout << c[0] << endl;

	save("소스.cpp");
}

//===============================================================================

int gn;//1번->컴파일 타임 주소확정

//이런거 시험문제 낼거야
char c[1'990'000'000]{ 'a',2,3,4};//이만큼의 메모리를 쓰고 있다면 실행파일의 크기가 2gb가 된다는 뜻
//메모리의 모양을 저장해놓는 곳은 실행파일 밖에 없기 때문

int main()
{
	int n;//3번->컴파일 타임 주소확정

	new int;//2번 사는 곳이 다른 이유와 변수마다 차이점=> 시험 문제를 낸다. ->런타임시 주소확정=>동적할당
	//=>2번은 이름이 없는게 차이점
}

=====================================================
저장한 시간 : 2023-10-11 수요일 오후 5:49:05
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.11 (6주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 실행 파일과 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 각 메모리 영역의 특성을 알아본다. (STACK, DATA, CODE, HEAP)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

int main()
{
	int* p;//stack
	p=new int;//시스템에 요청 - sizeof(int) - 시작번지를 리턴  ->free store
	//스택에서 프리스토어를 엑세스 하는 것을 포인터라고 합니다.

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 3:41:43
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 실행 파일과 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 각 메모리 영역의 특성을 알아본다. (STACK, DATA, CODE, HEAPkg)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<chrono>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//free store, stack, data, code

int main()
{
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 3:42:22
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 실행 파일과 메모리
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 각 메모리 영역의 특성을 알아본다. (STACK, DATA, CODE, HEAPkg)
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<chrono>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//free store, stack, data, code
//Dog gn;
//{
//	Dog n;
//}

int main()
{
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 3:47:55
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

//[문제] 화면에 1부터 100까지 출력하라

//---------
int main()
//---------
{
	for (int i{}; i < 100; ++i)
		cout << i + 1 << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 3:56:49
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//[문제] 파일 "1부터100까지"에 1부터 100까지 출력하라.

//---------
int main()
//---------
{
	ofstream 객체;
	cout << sizeof(객체);

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 4:02:46
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//[문제] 파일 "1부터100까지"에 1부터 100까지 출력하라.

//---------
int main()
//---------
{
	ofstream 객체{ "1부터100까지" };
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 4:12:41
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//[문제] 파일 "1부터100까지"에 1부터 100까지 출력하라.

//---------
int main()
//---------
{
	ofstream 객체{ "1부터100까지" };
	
	for (int i{}; i < 100; ++i)
		객체 << i << ' ';
	객체 << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 4:33:25
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//[문제] 파일 "1부터100까지"에는 정수 100개가 기록되어 있다.
//읽어서 값을 화면에 출력하라.

//---------
int main()
//---------
{
	ifstream in{ "1부터100까지" };
	
	int temp{};
	while (in >> temp)
		cout << temp << '\t';

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 4:35:11
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험 문제로 나올 수 있음
//[문제] 파일 "1부터100까지"에는 정수 100개가 기록되어 있다.
//읽어서 값을 화면에 출력하라.

//---------
int main()
//---------
{
	ifstream in{ "1부터100까지" };
	
	int temp{};
	while (in >> temp)
		cout << temp << '\t';

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 4:42:56
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험 문제로 나올 수 있음
//[문제] 파일 "1부터100까지"에는 정수 100개가 기록되어 있다.
//읽어서 값을 화면에 출력하라.

//---------
int main()
//---------
{
	ifstream in{ "1부터100까지" };//RAII

	if (not in) {//!in도 가능, in.is_open()이렇게 쓰면 0점 처리
		cout << "파일 열기 실패" << endl;
		exit(0);//return 0;도 가능
	}

	int num;
	in >> num;
	cout << num;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 4:54:15
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid;

//---------
int main()
//---------
{
	ofstream out{ "int만개.mp4" };

	for (int i{}; i < 1'0000; ++i) {
		out << uid(dre) << ' ';
		if (0 == (i + 1) % 10)
			out << endl;
	}

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 4:57:31
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 파일 "int만개.mp4"에는 int 만개가 저장되어 있다.
//가장 작은 값을 찾아 화면에 출력하라.

//---------
int main()
//---------
{
	int min = INT_MAX;
	ifstream in{ "int만개.mp4" };
	int temp{};

	while (in >> temp)
		if (temp < min)
			min = temp;

	cout << "min : " << min << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 5:08:35
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include<random>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "int만개.mp4"에는 int 만개가 저장되어 있다.
//가장 작은 값을 찾아 화면에 출력하라.

//---------
int main()
//---------
{
	ifstream in{ "int만개.mp4" };
	
	int val;
	int 최솟값{ numeric_limits<int>::max() };
	for (int i{}; i < 10'000; ++i) {
		in >> val;
		if (최솟값 > val)
			최솟값 = val;
	}

	cout << "min : " << 최솟값<< endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-12 목요일 오후 5:16:33
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.12 (6주 2일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include<random>
#include<algorithm>
#include<vector>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "int만개.mp4"에는 int 만개가 저장되어 있다.
//오름차순으로 정렬 후 화면에 전체 출력하라.

//---------
int main()
//---------
{
	ifstream in{ "int만개.mp4" };
	vector<int> numbers;
	int temp{};

	while (in >> temp) 
		numbers.push_back(temp);
	
	sort(numbers.begin(), numbers.end());

	for (const auto& num : numbers)
		cout << num << '\t';
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 5:30:49
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "int만개.mp4"에는 int 만개가 저장되어 있다.
//오름차순으로 정렬 후 화면에 전체 출력하라.

//---------
int main()
//---------
{
	ifstream in{ "int만개.mp4" };

	if (not in)
		return 0;

	int num[10000];

	for (int i{}; i < 1'0000; ++i)
		in >> num[i];

	qsort(num, 1'0000, 4, [](const void* a, const void* b) {
		return *(int*)a - *(int*)b;
		});

	for (int n : num)
		cout << n << endl;
	cout << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 5:38:31
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "int만개.mp4"에는 몇 개인지 모르느 int값이 저장되어 있다.
//몇 개인지 세서 출력하라.

//---------
int main()
//---------
{
	ifstream in{ "int만개.mp4" };

	if (not in)
		return 0;

	int num[10000];

	for (int i{}; i < 1'0000; ++i)
		in >> num[i];

	qsort(num, 1'0000, 4, [](const void* a, const void* b) {
		return *(int*)a - *(int*)b;
		});

	for (int n : num)
		cout << n << ' ';
	cout << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 5:39:38
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "int만개.mp4"에는 몇 개인지 모르느 int값이 저장되어 있다.
//몇 개인지 세서 출력하라.

//---------
int main()
//---------
{
	ifstream in{ "int만개.mp4" };

	if (not in)
		return 0;

	int num;
	int cnt{};

	while (in >> num)
		++cnt;

	cout << "모두 " << cnt << " 개의 int를 읽었다" << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 5:51:26
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "소스.cpp"에 'z'는 몇 개 있는지 화면에 출력하라
// 출력된 z의 개수를 답지에도 써라.

//---------
int main()
//---------
{
	ifstream in{ "소스.cpp" };//RAII

	if (not in)//오류 체크
		return 0;

	int cnt{};
	char temp;
	while (in >> temp)//읽을 수 있을 때까지 읽는다.
		if ('z' == temp)
			++cnt;

	cout << "z : " << cnt << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 6:03:15
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 사용자가 원하는 문자를 입력 받는다.
// 파일 "소스.cpp"에 그 문자가 몇 개 있는지 화면에 출력하라.
// 이 과정을 영원히 반복하라.

//---------
int main()
//---------
{
	ifstream in{ "소스.cpp" };//RAII

	if (not in)//오류 체크
		return 0;

	cout << "문자 입력 : ";
	char input;
	cin >> input;

	int cnt{};
	char temp;
	while (in >> temp)//읽을 수 있을 때까지 읽는다.
		if (input == temp)
			++cnt;

	cout << "그 문자 개수 : " << cnt << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 6:23:26
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "소스.cpp"에 있는 알파벳 소문자 개수를 세서 다음과 같이 출력하라.
//a - 3
//b - 10
//
//z - 0

//---------
int main()
//---------
{
	ifstream in{ "소스.cpp" };//RAII

	if (not in)//오류 체크
		return 0;

	char temp;
	int cnt[26]{};
	while (in >> temp)
		//if('a'<= temp &&'z'>=temp)
		if (islower(temp))//소문자인지
			++cnt[temp - 'a'];

	for (char c{ 'a' }; c <= 'z'; ++c)
		cout << c << " - " << cnt[c - 'a'] << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 6:24:15
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "소스.cpp"에 있는 알파벳 소문자 개수를 세서 다음과 같이 출력하라.
//a - 3
//b - 10
//
//z - 0

//---------
int main()
//---------
{
	ifstream in{ "소스.cpp" };//RAII

	if (not in)//오류 체크
		return 0;

	char temp;
	int cnt[26]{};
	while (in >> temp)
		//if('a'<= temp &&'z'>=temp)
		if (islower(temp))//소문자인지
			++cnt[temp - 'a'];

	for (int i{};i<26;++i)
		cout <<static_cast<char>( i+'a') << " - " << cnt[i] << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 6:34:33
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "소스.cpp"에 있는 글자를 모두 저장하는데 알파벳 소문자는 대문자로 바꿔
//"소스대문자.cpp"로 저장하라.

//---------
int main()
//---------
{
	ifstream in{ "소스.cpp" };//RAII
	ofstream out{ "소스대문자.cpp" };

	if (not in || not out)//오류 체크, out파일은 검사 불필요
		return 0;


	char temp;
	in >> noskipws;
	while (in >> temp)
	{
		if (islower(temp))
			temp = toupper(temp);

		out << temp;
	}

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 6:35:05
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "소스.cpp"에 있는 글자를 모두 저장하는데 알파벳 소문자는 대문자로 바꿔
//"소스대문자.cpp"로 저장하라.

//---------
int main()
//---------
{
	ifstream in{ "소스.cpp" };//RAII
	ofstream out{ "소스대문자.cpp" };

	if (not in )//오류 체크, out파일은 검사 불필요
		return 0;

	char temp;
	in >> noskipws;
	while (in >> temp)
	{
		if (islower(temp))
			temp = toupper(temp);

		out << temp;
	}

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 6:37:08
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "소스.cpp"에 있는 글자를 모두 저장하는데 알파벳 소문자는 대문자로 바꿔
//"소스대문자.cpp"로 저장하라.

//---------
int main()
//---------
{
	ifstream in{ "소스.cpp" };//RAII
	ofstream out{ "소스대문자.cpp" };

	if (not in)//오류 체크, out파일은 검사 불필요
		return 0;

	char temp;
	in >> noskipws;
	while (in >> temp)
	{

		temp = toupper(temp);

		out << temp;
	}

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 6:37:51
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// [실습] 파일에 자료를 읽고 쓰기 - int, char -> Dragon
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

//***시험으로 나올 수 있음
//[문제] 파일 "소스.cpp"에 있는 글자를 모두 저장하는데 알파벳 소문자는 대문자로 바꿔
//"소스대문자.cpp"로 저장하라.

//---------
int main()
//---------
{
	ifstream in{ "소스.cpp" };//RAII
	ofstream out{ "소스대문자.cpp" };

	if (not in)//오류 체크, out파일은 검사 불필요
		return 0;

	char temp;
	in >> noskipws;
	while (in >> temp)
		cout<<(char)toupper(temp);


	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 6:59:33
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

struct Test {
	int n;
	char c;
};

//---------
int main()
//---------
{
	Test t;//Object t가 메모리에 생성

	cout << sizeof(t) << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-18 수요일 오후 7:04:47
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.18 (7주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include "save.h"
using namespace std;

struct Test {
	int n;
	char c;
};

//---------
int main()
//---------
{
	Test t;//Object t가 메모리에 생성
	//padding 메모리 층을 둬서 속도를 빠르게

	cout << sizeof(t) << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-25 수요일 오후 6:46:17
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.25 (8주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

class Dog {

};


//---------
int main()
//---------
{
	//1. X만큼 메모리를 STACK에 주시오. 나는 Y라는 메모리를 access 하고싶다.
	// X Y;
	// 답
	//cout << sizeof(Y) << '\n';

	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-25 수요일 오후 6:50:37
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.25 (8주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

class Dog {
	string name;
public:
	Dog(){}
	Dog(string name, int num) {

	}
	~Dog() {
		cout << name << "개님 물러가심" << endl;
		//PlaySound();
	}
};


//---------
int main()
//---------
{
	Dog d;//디폴트 생성
	Dog x = d;//x는 d를 복사해서 생성

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-25 수요일 오후 6:59:39
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.25 (8주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

class Dog {
	string name;
	int age;
public:
	Dog(){}
	Dog(string name, int num) {
		cout << name << " 탄생" << endl;
	}
	~Dog() {
		cout << name << "개님 물러가심" << endl;
		//PlaySound();
	}

	//복사생성자
	Dog(const Dog& other) :name{ other.name }, age{ other.age } {
		cout << name << " 복사생성" << endl;
	}
};


//---------
int main()
//---------
{
	Dog d{ "댕댕",2 };//디폴트 생성
	Dog x(d);//x는 d를 복사해서 생성

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-25 수요일 오후 7:00:51
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.25 (8주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

class Dog {
	string name;
	int age;
public:
	Dog(){}
	Dog(string name, int num) {
		cout << name << " 탄생" << endl;
	}
	~Dog() {
		cout << name << "개님 물러가심" << endl;
		//PlaySound();
	}

	//복사생성자
	Dog(const Dog& other) :name{ other.name }, age{ other.age } {
		cout << name << " 복사생성" << endl;
	}
};


//---------
int main()
//---------
{
	Dog d{ "댕댕",2 };//디폴트 생성
	Dog x(d);//x는 d를 복사해서 생성
	Dog y{ "와이",20 };

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-10-25 수요일 오후 7:03:43
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 10.25 (8주 1일)
// 
// 10.26 중간고사
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

class Dog {
	string name;
	int age;
public:
	Dog(){}
	Dog(string str, int num) :name(str),age(num){
		cout << name << " 탄생" << endl;
	}
	~Dog() {
		cout << name << "개님 물러가심" << endl;
		//PlaySound();
	}

	//복사생성자
	Dog(const Dog& other) :name{ other.name }, age{ other.age } {
		cout << name << " 복사생성" << endl;
	}
};


//---------
int main()
//---------
{
	Dog d{ "댕댕",2 };//디폴트 생성
	Dog x(d);//x는 d를 복사해서 생성
	Dog y{ "와이",20 };

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-01 수요일 오후 6:57:53
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.01 (9주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

class MemoryMonster {
	int* ptr;
	int size;

public:
	MemoryMonster(int s) :size(s){
		ptr = new int[s];
		ptr[0] = 333;
	}

	void show() {
		cout << "메모리 확보한 수 - " << size << ", 첫 데이터 - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster m{ 100 };//Free store에 int 100개가 저장될 공간을 확보한다.
							//메모리의 내용을 랜덤값[1,9999]으로 채운다.

	m.show();				//메모리 확보한 수 - 100, 첫 데이터 -333

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-01 수요일 오후 7:04:34
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.01 (9주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid(1, 100);

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

class MemoryMonster {
	int* ptr;
	int size;

public:
	MemoryMonster(int s) :size(s){
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);
	}

	void show() {
		cout << "메모리 확보한 수 - " << size << ", 첫 데이터 - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster m{ 100 };//Free store에 int 100개가 저장될 공간을 확보한다.
							//메모리의 내용을 랜덤값[1,9999]으로 채운다.

	m.show();				//메모리 확보한 수 - 100, 첫 데이터 -333

	save("소스.cpp");
}

//클래스 코딩 순서
class 사용자 {
	//이 순서대로 코딩하는게 좋다.
public:
	//special 함수 먼저
	//사용자() =delete;//스페셜 이렇게 하면 디폴트 생성이 안 된다.
	사용자(){}//스페셜
	//기타 사용자가 정의한 생성자
	사용자(int){}//스페셜이 아닌 생성자
	사용자(const 사용자&){}//스페셜
	사용자& operator=(const 사용자&){}//스페셜
	~사용자(){}//스페셜

	//getter/setter
protected:
private:
	//사용자(){}//스페셜 ->이렇게 쓰는 경우도 있다.
};

//heap은 자료형 상관없이 메모리 할당
//free store는 그렇지 않음


=====================================================
저장한 시간 : 2023-11-02 목요일 오후 3:59:55
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{s}{//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}

	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster m{ 100 };//Free store에 int 100개가 저장될 공간을 확보한다.
							//메모리의 내용을 랜덤값[1,9999]으로 채운다.

	m.show();				//메모리 확보한 수 - 100, 첫 데이터 -333

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:07:03
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{s}{//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster m{ 100 };//Free store에 int 100개가 저장될 공간을 확보한다.
							//메모리의 내용을 랜덤값[1,9999]으로 채운다.

	m.show();				//메모리 확보한 수 - 100, 첫 데이터 -333

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:08:31
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{s}{//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster m{ 100 };//Free store에 int 100개가 저장될 공간을 확보한다.
							//메모리의 내용을 랜덤값[1,9999]으로 채운다.

	MemoryMonster a{ 123456 };

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:10:52
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{s}{//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster a{ 100 };//메모리 100바이트를 가지고 노는 객체
	MemoryMonster b=a;//b를 a와 똑같이 만들어줘라.

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:36:21
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	MemoryMonster (MemoryMonster& m) {//복사 생성자
		this->size = m.size;

		this->ptr = new int[this->size];

		for (int i{}; i < this->size; ++i)
			this->ptr[i] = m.ptr[i];

	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster a{ 100 };//메모리 100바이트를 가지고 노는 객체
	MemoryMonster b = a;//b를 a와 똑같이 만들어줘라.
	//***중요 시험!!!
	//소멸자에서 delete[] ptr;에서 왜 터지는지?
	//1.a생성 2.b생성 3.b소멸 4.a가 소멸해야 하는데 b가 이미 반환했기에 반환할 수 없는 포인터를 반환하면 프로그램이 죽는다.
	//이런걸 dangling point 댕글링 포인터라고 한다.
	//출력창의 정보를 주고 a가 죽었는지 b가 죽었는지 시험에 낸다.
	//정답은 a가 반환될 때 죽은거야. 댕글링 포인터가 되어버렸어.
	//해결책은 복사생성자를 직접 코딩하여 깊은 복사를 한다.
	//포인터를 복사하는건 얕은 복사, 값들을 새로운 포인터에 복사하는건 깊은 복사

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:40:25
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster a{ 100 };//메모리 100바이트를 가지고 노는 객체
	MemoryMonster b = a;//b를 a와 똑같이 만들어줘라.
	//***중요 시험!!!
	//소멸자에서 delete[] ptr;에서 왜 터지는지?
	//1.a생성 2.b생성 3.b소멸 4.a가 소멸해야 하는데 b가 이미 반환했기에 반환할 수 없는 포인터를 반환하면 프로그램이 죽는다.
	//이런걸 dangling point 댕글링 포인터라고 한다.
	//출력창의 정보를 주고 a가 죽었는지 b가 죽었는지 시험에 낸다.
	//정답은 a가 반환될 때 죽은거야. 댕글링 포인터가 되어버렸어.
	//해결책은 복사생성자를 직접 코딩하여 깊은 복사를 한다.
	//포인터를 복사하는건 얕은 복사, 값들을 새로운 포인터에 복사하는건 깊은 복사

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:42:12
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster a[5]{ 10000,200000,1000000,123456,2345678 };
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:43:43
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster a[5]{ 10000,200000,1000000,123456,2345678 };
	
	cout << endl << endl << endl;

	for (MemoryMonster mon : a)
		a->show();


	cout << endl << endl << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:44:08
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster a[5]{ 10000,200000,1000000,123456,2345678 };
	
	cout << endl << endl << endl;

	for (MemoryMonster mon : a)
		mon.show();


	cout << endl << endl << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:44:53
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster a[3]{ 1,3,5 };
	
	cout << endl << endl << endl;

	for (MemoryMonster mon : a)
		mon.show();


	cout << endl << endl << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:49:25
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show() {
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	MemoryMonster a[3]{ 1,3,5 };
	
	cout << endl << endl << endl;

	for (MemoryMonster& mon : a)//&을 넣으면 생성,복사,소멸순이 아니라 생성,소멸 순이다.
		mon.show();


	cout << endl << endl << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:55:34
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show()	const {//const는 이 함수가 데이터를 읽기만 하고 쓰지 않음을 나타냄.
		//size = 300; const때문에 읽기만 하기에 안됨.
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	const int n{ 333 };//읽기만 하는 const는 초기화가 필요함. 한정자라고 함.
	//const int와 int const는 같은 의미

	MemoryMonster a[3]{ 1,3,5 };
	
	cout << endl << endl << endl;

	for (const MemoryMonster& mon : a)//&을 넣으면 생성,복사,소멸순이 아니라 생성,소멸 순이다. const 일관성 때문에 빨간줄
		mon.show();


	cout << endl << endl << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-02 목요일 오후 4:56:02
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.02 (9주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	//인터페이스 함수
	void show()	const {//const는 이 함수가 데이터를 읽기만 하고 쓰지 않음을 나타냄.
		//size = 300; const때문에 읽기만 하기에 안됨.
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	const int n{ 333 };//읽기만 하는 const는 초기화가 필요함. 한정자라고 함.
	//const int와 int const는 같은 의미

	MemoryMonster a[3]{ 1,3,5 };
	
	cout << endl << endl << endl;

	for (const MemoryMonster& mon : a)//&을 넣으면 생성,복사,소멸순이 아니라 생성,소멸 순이다. const 일관성 때문에 빨간줄
		mon.show();
	//&이거 빼놓고 관찰 메시지 빼놓고 뭐가 틀렸는지 찾아봐라. 이런 문제도?

	cout << endl << endl << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 6:10:19
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	// 필요하다면 getter와 setter를 제공하여 private 멤버에 접근하도록 한다.
	int getSize() {
		return size;
	}

	//인터페이스 함수
	void show()	const {//const는 이 함수가 데이터를 읽기만 하고 쓰지 않음을 나타냄.
		//size = 300; const때문에 읽기만 하기에 안됨.
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	//DMA
	MemoryMonster a[]{ 1,3,5,7,9,2,4,6,8,10 };
	//[문제] qsort를 사용하여 a를 size기준 오름차순으로 정렬하고 show()를 호출하라.



	qsort(a, sizeof(a) / sizeof(a[0]), sizeof(MemoryMonster), [](const void* a,const void* b) {
		return ((MemoryMonster*)a)->getSize() - ((MemoryMonster*)b)->getSize();
		});

	for (const MemoryMonster& mon : a)//for루프에서 auto 쓰지 말기, 가독성이 떨어지기에, 유지보수성을 높이기 위해
		mon.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 6:10:57
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	// 필요하다면 getter와 setter를 제공하여 private 멤버에 접근하도록 한다.
	int getSize() {
		return size;
	}

	//인터페이스 함수
	void show()	const {//const는 이 함수가 데이터를 읽기만 하고 쓰지 않음을 나타냄.
		//size = 300; const때문에 읽기만 하기에 안됨.
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	//DMA
	MemoryMonster a[]{ 1,3,5,7,9,2,4,6,8,10 };
	//[문제] qsort를 사용하여 a를 size기준 오름차순으로 정렬하고 show()를 호출하라.



	qsort(a, sizeof(a) / sizeof(a[0]), sizeof(MemoryMonster), [](const void* a,const void* b) {
		return ((MemoryMonster*)b)->getSize() - ((MemoryMonster*)a)->getSize();//a b바꾸면 오름차순
		});

	for (const MemoryMonster& mon : a)//for루프에서 auto 쓰지 말기, 가독성이 떨어지기에, 유지보수성을 높이기 위해
		mon.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 6:17:44
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
using namespace std;

//[문제] 나는 MemoryMonster다. 나는 생성 시에 int 값을 전달받아 그 수만큼 int 메모리를 생성한다.
//생성한 메모리에 값을 랜덤하게 기록한다.
//나를 코딩해 줘.
//다음 코드가 문제없이 실행되면 좋겠어.

default_random_engine dre;
uniform_int_distribution uid(1, 9999);

class MemoryMonster {
	//size_t size;//unsigned int 이렇게 써도 됨. 표준c++은 멤버 변수부터 쓰지x 강의할 때 편해서
	int size;
	int* ptr;

public:
	MemoryMonster(int s) :size{ s } {//소괄호로 초기화하면 오류가 안 떠서 쓰지x
		//int가 음수가 있을 수 있어서 오류가 난다.
		ptr = new int[s];

		for (int i{}; i < s; ++i)
			ptr[i] = uid(dre);

		cout << "생성(int) - " << size << ", [0] - " << ptr[0] << endl;
	}
	//복사 생성자
	//const는 손상 방지, 읽기 전용   &은 복사하지않고 원격조작하겠다는 의미
	MemoryMonster(const MemoryMonster& other) :size{ other.size } {
		ptr = new int[size];

		for (int i{}; i < size; ++i)
			ptr[i] = other.ptr[i];

		cout << "복사생성 - " << size << ", [0] - " << ptr[0] << endl;
	}
	~MemoryMonster() {
		cout << "소멸직전 - " << size << ", [0] - " << ptr[0] << endl;
		//if(nullptr!=ptr)// null이 아닐 때만 밑의 코드가 돌아가기에 이건 쓸모없다.
		delete[] ptr;
	}

	// 필요하다면 getter와 setter를 제공하여 private 멤버에 접근하도록 한다.
	int getSize() {
		return size;
	}

	//인터페이스 함수
	void show()	const {//const는 이 함수가 데이터를 읽기만 하고 쓰지 않음을 나타냄.
		//size = 300; const때문에 읽기만 하기에 안됨.
		cout << "내가 관리하는 int의 수 - " << size << ", [0] - " << ptr[0] << endl;
	}
};

//---------
int main()
//---------
{
	//DMA
	MemoryMonster a[]{ 1,3,5,7,9,2,4,6,8,10 };
	//[문제] qsort를 사용하여 a를 size기준 오름차순으로 정렬하고 show()를 호출하라.


	//제네릭한 함수
	qsort(a, sizeof(a) / sizeof(a[0]), sizeof(MemoryMonster), [](const void* a,const void* b) {
		return ((MemoryMonster*)b)->getSize() - ((MemoryMonster*)a)->getSize();//a b바꾸면 오름차순
		});

	//여기 const붙이려면 show함수에도 const 한정자를 붙입니다.
	for (const MemoryMonster& mon : a)//for루프에서 auto 쓰지 말기, 가독성이 떨어지기에, 유지보수성을 높이기 위해
		mon.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 6:23:04
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.


//---------
int main()
//---------
{
	string s{ "나는 C의 문자열을 대체할 수 있는 string이야!" };
	
	cout << s << endl;
	
	s = s + "2023. 11. 16일은 수능보러 가야지";

	cout << s << endl;

	cout << "내가 관리하는 문자열의 개수는 - " << s.size() << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 6:39:14
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	size_t size() const {
		return num;
	}
};


//---------
int main()
//---------
{
	STRING s{ "나는 C의 문자열을 대체할 수 있는 string이야!" };
	
	cout << "s의 글자 수 - " <<s.size()<< endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 6:41:15
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	STRING s{ "나는 C의 문자열을 대체할 수 있는 string이야!" };
	
	cout << "s의 글자 수 - " <<s.size()<< endl;

	s.show();//내가 저장한 문자열을 출력하자.
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 6:50:21
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	
	STRING s[]{ "덴마크의", "컴퓨터", "과학자", "비야네", "스트로스트룹","Bjarne Stroustrup","C언어","바탕으로 만들었다." };
	
	//시험 문제: s를 길이 오름차순으로 정렬한 후 출력하라.
	qsort(s, sizeof(s) / sizeof(STRING), sizeof(STRING),
		[](const void* a, const void* b) {
			return (int)(((STRING*)a)->size() - ((STRING*)b)->size());
	});

	//결과 출력
	cout << endl << "길이 오름차순 정렬결과" << endl;
	for (const STRING& s : s)
		s.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 6:52:26
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}
	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	
	STRING s[]{ "덴마크의", "컴퓨터", "과학자", "비야네", "스트로스트룹","Bjarne Stroustrup","C언어","바탕으로 만들었다." };
	
	//시험 문제: s를 길이 오름차순으로 정렬한 후 출력하라.
	qsort(s, sizeof(s) / sizeof(STRING), sizeof(STRING),
		[](const void* a, const void* b) {
			return (int)(((STRING*)a)->size() - ((STRING*)b)->size());
	});

	//결과 출력
	cout << endl << "길이 오름차순 정렬결과" << endl;
	for (const STRING& s : s)
		s.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 6:55:18
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}
	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	STRING s{ "스트링" };
	STRING t = s;

	s.show();
	t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-08 수요일 오후 7:00:27
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.06 (10주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}
	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	STRING s{ "스트링" };
	STRING t = s;

	s.show();
	t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 3:30:48
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}
	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	STRING s{ "스트링" };
	STRING t = s;

	s.show();
	t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 3:45:42
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}

	//2023. 11. 09 복사 생성자(스페셜 함수)
	STRING(const STRING& other) :num{ other.num } {
		p = new char[num];
		//deep-copy
		memcpy(p,other.p,num);//DMA

		cout << "복사 생성자 - " << num << ", 메모리: " << (void*)p << endl;
	}

	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	STRING s{ "스트링" };//8byte
	STRING t = s;

	s.show();
	t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 3:49:01
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}

	//2023. 11. 09 복사 생성자(스페셜 함수)
	STRING(const STRING& other) :num{ other.num } {
		p = new char[num];
		//deep-copy
		memcpy(p,other.p,num);//DMA

		cout << "복사 생성자 - " << num << ", 메모리: " << (void*)p << endl;
	}

	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	STRING s{ "스트링" };//8byte
	STRING t{ "2023. 11. 09"};

	s.show();
	t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 3:50:34
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}

	//2023. 11. 09 복사 생성자(스페셜 함수)
	STRING(const STRING& other) :num{ other.num } {
		p = new char[num];
		//deep-copy
		memcpy(p,other.p,num);//DMA

		cout << "복사 생성자 - " << num << ", 메모리: " << (void*)p << endl;
	}

	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	STRING s{ "스트링" };//8byte
	STRING t{ "2023. 11. 09"};

	s.show();
	t.show();

	t = s;
	cout << "\n\n\ns와 같아진 t" << "\n\n\n";
	t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:17:33
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}

	//2023. 11. 09 복사 생성자(스페셜 함수)
	STRING(const STRING& other) :num{ other.num } {
		p = new char[num];
		//deep-copy
		memcpy(p,other.p,num);//DMA

		cout << "복사 생성자 - " << num << ", 메모리: " << (void*)p << endl;
	}
	//2023. 11. 09 복사 생성자를 만들었다면 이와 짝이 되는 copy assignment operator를 
	//반드시 코딩해야 한다.
	STRING& operator=(const STRING& other) {
		delete[] p;

		num = other.num;
		p = new char[num];
		memcpy(p, other.p, num);

		cout << "copy assignment 연산자 - " << num << ", 메모리: " << (void*)p << endl;

		return *this;
	}

	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	STRING s{ "스트링" };//8byte
	STRING t{ "2023. 11. 09"};

	s.show();
	t.show();

	t = s;//이미 생성된 객체를 다른 객체의 데이터로 assign하는 special한 순간이다
	//STRING& operator=(const STRING& other)

	cout << "\n\n\ns와 같아진 t" << "\n\n\n";
	t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:20:53
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}

	//2023. 11. 09 복사 생성자(스페셜 함수)
	STRING(const STRING& other) :num{ other.num } {
		p = new char[num];
		//deep-copy
		memcpy(p,other.p,num);//DMA

		cout << "복사 생성자 - " << num << ", 메모리: " << (void*)p << endl;
	}
	//2023. 11. 09 복사 생성자를 만들었다면 이와 짝이 되는 copy assignment operator를 
	//반드시 코딩해야 한다.
	STRING& operator=(const STRING& other) {
		delete[] p;

		num = other.num;
		p = new char[num];
		memcpy(p, other.p, num);

		cout << "copy assignment 연산자 - " << num << ", 메모리: " << (void*)p << endl;

		return *this;
	}

	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	int n = 100;
	n = n = n = n = n = 200;//우결합, 오른쪽부터 실행

	STRING s{ "스트링" };
	s = s = s = "안녕하세요";

	s.show();


	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:25:05
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
using namespace std;

//[문제] std::string은 C언어의 char*를 완벽하게 대체한다.
//std::string과 유사하게 동작하는 STRING 클래스를 코딩하여
//자원을 관리하는 클래스를 공부한다.
//main()이 문제없이 실행되게 하자.

class STRING {
	size_t num;
	char* p;
public:
	STRING(const char* s) :num{ strlen(s) } {
		p = new char[num];
		memcpy(p, s, num);

		cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << endl;
	}

	~STRING() {
		cout << "소멸자 - " << num << " , 메모리: " << (void*)p << endl;
		delete[] p;
	}

	//2023. 11. 09 복사 생성자(스페셜 함수)
	STRING(const STRING& other) :num{ other.num } {
		p = new char[num];
		//deep-copy
		memcpy(p,other.p,num);//DMA

		cout << "복사 생성자 - " << num << ", 메모리: " << (void*)p << endl;
	}
	//2023. 11. 09 복사 생성자를 만들었다면 이와 짝이 되는 copy assignment operator를 
	//반드시 코딩해야 한다.
	STRING& operator=(const STRING& other) {
		//가장 먼저 할 일은 자기 자신을 할당하지 않도록 해야 한다.
		if (this == &other)
			return *this;

		delete[] p;

		num = other.num;
		p = new char[num];
		memcpy(p, other.p, num);

		cout << "copy assignment 연산자 - " << num << ", 메모리: " << (void*)p << endl;

		return *this;
	}

	size_t size() const {
		return num;
	}

	void show() const {
		for (int i{}; i < num; ++i)
			cout << p[i];
		cout << endl;
	}
};


//---------
int main()
//---------
{
	//int n = 100;
	//n = n = n = n = n = 200;//우결합, 오른쪽부터 실행

	STRING s{ "스트링" };
	s = s = s = "안녕하세요";

	s.show();


	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:41:15
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;

//[할 일] class STRING을 main()과 같이 코딩하는 건 아니다.
//STRING의 선언 부분을 STRING.h
//STRING의 정의 부분을 STRING.cpp
//파일을 분리한다.


//---------
int main()
//---------
{
	//int n = 100;
	//n = n = n = n = n = 200;//우결합, 오른쪽부터 실행

	STRING s{ "스트링" };
	s = s = s = "안녕하세요";

	s.show();

	save("소스.cpp");
	save("STRING.h");
	save("STRING.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:41:15
=====================================================

//---------------------------------------------------------------------------------
//STRING.h
// 
// 2023.11.09 파일분리함
//---------------------------------------------------------------------------------

#pragma once

class STRING {
	size_t num;
	char* p;

public:
	STRING(const char* s);
	~STRING();

	//2023. 11. 09 복사 생성자(스페셜 함수)
	STRING(const STRING& other);

	//2023. 11. 09 복사 생성자를 만들었다면 이와 짝이 되는 copy assignment operator를 
	//반드시 코딩해야 한다.
	STRING& operator=(const STRING& other);

	size_t size() const;

	void show() const;
};



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:41:15
=====================================================

//---------------------------------------------------------------------------------
//STRING.cpp
// 
// 2023.11.09 파일분리함
//---------------------------------------------------------------------------------
#include<iostream>
#include "STRING.h"

STRING::STRING(const char* s)
	:num{ strlen(s) }
{
	p = new char[num];
	memcpy(p, s, num);

	std::cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << std::endl;
}

STRING::~STRING() {
	std::cout << "소멸자 - " << num << " , 메모리: " << (void*)p << std::endl;
	delete[] p;
}

//2023. 11. 09 복사 생성자(스페셜 함수)
STRING::STRING(const STRING& other) :num{ other.num } {
	p = new char[num];
	//deep-copy
	memcpy(p, other.p, num);//DMA

	std::cout << "복사 생성자 - " << num << ", 메모리: " << (void*)p << std::endl;
}
//2023. 11. 09 복사 생성자를 만들었다면 이와 짝이 되는 copy assignment operator를 
//반드시 코딩해야 한다.
STRING& STRING::operator=(const STRING& other) {
	//가장 먼저 할 일은 자기 자신을 할당하지 않도록 해야 한다.
	if (this == &other)
		return *this;

	delete[] p;

	num = other.num;
	p = new char[num];
	memcpy(p, other.p, num);

	std::cout << "copy assignment 연산자 - " << num << ", 메모리: " << (void*)p << std::endl;

	return *this;
}

size_t STRING::size() const {
	return num;
}

void STRING::show() const {
	for (int i{}; i < num; ++i)
		std::cout << p[i];
	std::cout << std::endl;
}




=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:47:50
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;



//---------
int main()
//---------
{
	STRING s{ "스트링" };



	save("소스.cpp");

}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:49:54
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;



//---------
int main()
//---------
{
	STRING s{ "스트링" };
	STRING::관찰 = true;

	s.show();

	save("소스.cpp");

}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:52:28
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;



//---------
int main()
//---------
{
	//STRING::관찰 = true;

	string s{ "나는 표준 string" };
	string t = s;

	cout << "s - " << s << endl;
	cout << "t - " << t << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 4:53:26
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;



//---------
int main()
//---------
{
	//STRING::관찰 = true;

	string s{ "나는 표준 string" };
	string t = move(s);//c++11 이동생성

	cout << "s - " << s << endl;
	cout << "t - " << t << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 5:03:18
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;



//---------
int main()
//---------
{
	//STRING::관찰 = true;

	STRING s{ "나는 표준 string" };
	STRING t = move(s);//c++11 이동생성

	cout << "s - "; s.show();
	cout << "t - "; t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 5:04:10
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;



//---------
int main()
//---------
{
	STRING::관찰 = true;

	STRING s{ "나는 표준 string" };
	STRING t = move(s);//c++11 이동생성

	cout << "s - "; s.show();
	cout << "t - "; t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-09 목요일 오후 5:16:14
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.09 (10주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;



//---------
int main()
//---------
{
	//STRING::관찰 = true;

	STRING s{ "나는 표준 string" };
	STRING t = move(s);

	cout << "s - "; s.show();
	cout << "t - "; t.show();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-15 수요일 오후 5:48:18
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.15 (11주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;

//---------
int main()
//---------
{
	cout<<1<<2<<endl;	//syntactic sugar
	cout.operator<<(1).operator<<(2).operator << ("sdfasdfads");

	save("소스.cpp");
}


int main()
//---------
{
	STRING::관찰 = true;

	STRING s{ "난 string이야" };

	s = s + " 난 + 기능도 된다!";

	s.show();
	cout << s << endl;

	//save("소스.cpp");
}
//이건 안 되는 이유가 STRING + const char* 이기때문입니다.
//1. lhs가 객체라면 member 함수를 찾는다.
//s.operator + (rhs);

//2. lhs의 멤버를 찾지 못하면 전역 함수(free function)를 찾는다.
//operator + (lhs, rhs);

=====================================================
저장한 시간 : 2023-11-15 수요일 오후 6:24:25
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.15 (11주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;

//---------
int main()
//---------
{
	STRING::관찰 = true;

	STRING s{ "난 string이야" };

	s = s + " 난 + 기능도 된다!";//멤버로 코딩 operator+(rhs)

	s.show();
	//cout << s << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-15 수요일 오후 6:53:38
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.15 (11주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;

//---------
int main()
//---------
{
	//STRING::관찰 = true;

	STRING s{ "난 string이야" };
	STRING t{ "내일은 수능보러 가야지!" };

	STRING u = s + t;//s.operator+( t )

	//s = s + " 난 + 기능도 된다!";//멤버로 코딩 operator+(rhs)

	u.show();

	//cout << s << endl;

	save("소스.cpp");
}

//오늘은 코딩만
ostream& operator<<(ostream&, const STRING&);

cout << 1;

=====================================================
저장한 시간 : 2023-11-16 목요일 오후 3:49:51
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;




//---------
int main()
//---------
{
	//STRING::관찰 = true;

	STRING s{ "난 string이야" };
	//1. cout.operator<<(s);
	//ostream.operator<<( STRING )이 있다면 
	cout << s << endl;//여기에 빨간 줄이 안 생긴다!
	//free function으로 해결

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 3:50:36
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;




//---------
int main()
//---------
{
	//STRING::관찰 = true;

	STRING s{ "난 string이야" };
	//1. cout.operator<<(s);
	//ostream.operator<<( STRING )이 있다면 
	operator<<(cout,s) << endl;//여기에 빨간 줄이 안 생긴다!
	//free function으로 해결

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 3:50:55
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;




//---------
int main()
//---------
{
	//STRING::관찰 = true;

	STRING s{ "난 string이야" };
	//1. cout.operator<<(s);
	//ostream.operator<<( STRING )이 있다면 
	operator<<(cout,s) << endl;//여기에 빨간 줄이 안 생긴다! ***중요 시험에 나올 수 있음
	//free function으로 해결

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:02:09
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;




//---------
int main()
//---------
{
	
	STRING s{ "난 string이야" };

	s = "오늘은 수능시험 날 - " + s;

	cout << s << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:06:32
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//C++에서는
//char*로 문자열을 다루지 않는다  ---> string
//[]을 사용하지 않는다            ---> array<타입,개수>
//자원을 다루는 곳에 *을 사용하지 않는다 ---> unique_ptr


//---------
int main()
//---------
{
	string s{ "C++ Programming Language" };

	for (int i{}; i < s.size(); ++i)
		cout << s[i] << " - ";
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:12:55
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//C++에서는
//char*로 문자열을 다루지 않는다  ---> string
//[]을 사용하지 않는다            ---> array<타입,개수>
//자원을 다루는 곳에 *을 사용하지 않는다 ---> unique_ptr


//---------
int main()
//---------
{
	STRING s{ "C++ Programming Language" };

	for (int i{}; i < s.size(); ++i)
		cout << s.operator[](i) << " - ";
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:13:16
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//C++에서는
//char*로 문자열을 다루지 않는다  ---> string
//[]을 사용하지 않는다            ---> array<타입,개수>
//자원을 다루는 곳에 *을 사용하지 않는다 ---> unique_ptr


//---------
int main()
//---------
{
	STRING s{ "C++ Programming Language" };

	for (int i{}; i < s.size(); ++i)
		cout << s.operator[](i) << " - ";//s[i]
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:13:40
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//C++에서는
//char*로 문자열을 다루지 않는다  ---> string
//[]을 사용하지 않는다            ---> array<타입,개수>
//자원을 다루는 곳에 *을 사용하지 않는다 ---> unique_ptr


//---------
int main()
//---------
{
	STRING s{ "C++ Programming Language" };

	for (int i{}; i < s.size(); ++i)
		cout << s[i];
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:13:56
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//C++에서는
//char*로 문자열을 다루지 않는다  ---> string
//[]을 사용하지 않는다            ---> array<타입,개수>
//자원을 다루는 곳에 *을 사용하지 않는다 ---> unique_ptr


//---------
int main()
//---------
{
	STRING s{ "C++ Programming Language" };

	cout << s;
	cout << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:27:54
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//C++에서는
//char*로 문자열을 다루지 않는다  ---> string
//[]을 사용하지 않는다            ---> array<타입,개수>
//자원을 다루는 곳에 *을 사용하지 않는다 ---> unique_ptr


//---------
int main()
//---------
{
	STRING s{ "C++ Programming Language" };

	//[문제] s가 갖고 있는 문장을 오름차순으로 정렬하라
	qsort(&s[0], s.size(),sizeof(char), [](const void* fir, const void* sec) {
		return *(char*)fir - *(char*)sec;
		});
	cout << s << endl;
	
	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:48:40
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

void a() { cout<<"안녕 난 a야"; }
void b() { cout<<"안녕 난 b야"; }

//---------
int main()
//---------
{
	void(*sw)() = a;

	sw ();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:49:08
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

void a() { cout<<"안녕 난 a야"; }
void b() { cout<<"안녕 난 b야"; }

//---------
int main()
//---------
{
	void(*sw)() = a;

	sw = b;

	sw ();

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:50:35
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()



//---------
int main()
//---------
{
	int n = 100;

	++n;

	cout << n << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:50:59
=====================================================

//---------------------------------------------------------------------------------
//STRING.h
// 
// 2023.11.09 파일분리함
//---------------------------------------------------------------------------------

#pragma once

class STRING {
	size_t num{};//모든 메모리 비트를 0으로
	char* p{};//nullptr로 되어 있다.

public:
	//2023. 11. 15 인자를 받는 생성자를 하나라도 코딩했다면 반드시 디폴트생성자를 코딩
	STRING() = default;
	STRING(const char* s);
	~STRING();

	//2023. 11. 09 복사 생성자(스페셜 함수)
	STRING(const STRING& other);

	//2023. 11. 09 복사 생성자를 만들었다면 이와 짝이 되는 copy assignment operator를 
	//반드시 코딩해야 한다.
	STRING& operator=(const STRING& other);

	//2023.11.09 이동과 이동할당
	STRING(STRING&&);//const를 붙일 수 없어요. 데이터를 뺏길텐데

	//2023. 11. 15 연산자 오버로딩
	STRING operator+(const char*)const;
	STRING operator+(const STRING&)const;

	//2023.11.16 free function
	friend STRING operator+(const char*, const STRING&);
	
	//2023.11.16
	char operator[](int idx)const;//읽기 전용 [], 위아래는 전혀 다른 함수 오버로딩에 관여하지않음.
	char& operator[](int idx);//쓰기 전용

	size_t size() const;

	void show() const;

	//스페셜 함수를 필요할때 관찰한다.
	static bool 관찰;


	//2023.11.16 입출력 기능은 이 클래스와 밀접한 기능이다
	//그래서 operator<< 함수는 STRING의 멤버에 마치 이 함수도 멤버함수인것 처럼 자유롭게
	//접근하도록 코딩하는 것이 합리적이다. -> 이 함수를 friend로 선언한다
	friend std::ostream& operator<<(std::ostream&, const STRING&);
};



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:50:59
=====================================================

//---------------------------------------------------------------------------------
//STRING.cpp
// 
// 2023.11.09 파일분리함
//---------------------------------------------------------------------------------
#include<iostream>
#include "STRING.h"


bool STRING::관찰{ false };//관찰하려면 아무데서나 true로 바꿔주세요

STRING::STRING(const char* s)
	:num{ strlen(s) }
{
	p = new char[num];
	memcpy(p, s, num);

	if(관찰)
		std::cout << "생성자(const char*) - " << num << ", 메모리: " << (void*)p << std::endl;
}

STRING::~STRING() 
{
	
	if(관찰)
		std::cout << "소멸자 - " << num << " , 메모리: " << (void*)p << std::endl;
	delete[] p;
}

//2023. 11. 09 복사 생성자(스페셜 함수)
STRING::STRING(const STRING& other) :num{ other.num } {
	p = new char[num];
	//deep-copy
	memcpy(p, other.p, num);//DMA

	if(관찰)
		std::cout << "복사 생성자 - " << num << ", 메모리: " << (void*)p << std::endl;
}
//2023. 11. 09 복사 생성자를 만들었다면 이와 짝이 되는 copy assignment operator를 
//반드시 코딩해야 한다.
STRING& STRING::operator=(const STRING& other) 
{
	//가장 먼저 할 일은 자기 자신을 할당하지 않도록 해야 한다.
	if (this == &other)
		return *this;

	delete[] p;

	num = other.num;
	p = new char[num];
	memcpy(p, other.p, num);

	if(관찰)
		std::cout << "copy assignment 연산자 - " << num << ", 메모리: " << (void*)p << std::endl;

	return *this;
}

STRING::STRING(STRING&& other) 
	:num{other.num},p{other.p}
{//const를 붙일 수 없어요. 데이터를 뺏길텐데
	//other를 초기화한다.
	other.num = 0;
	other.p = nullptr;
}

//2023. 11. 15 연산자 오버로딩
STRING STRING::operator+(const char* str)const
{
	STRING temp;//default ctor는 스페셜 함수, 디폴트 생성자를 정의해서 빨간 줄을 사라지게 했다.

	temp.num = num + strlen(str);
	temp.p=new char[temp.num];

	memcpy(temp.p, p, num);
	memcpy(temp.p + num, str, strlen(str));

	return temp;//여기서 복사 생성자가 호출되어야 하지만 RVO가 작동된다.
	//RVO(Return Value Optimization) - 반환값 최적화
}
STRING STRING::operator+(const STRING& s)const
{
	STRING temp;//default ctor는 스페셜 함수, 디폴트 생성자를 정의해서 빨간 줄을 사라지게 했다.

	temp.num = num + s.num;
	temp.p = new char[temp.num];

	memcpy(temp.p, p, num);
	memcpy(temp.p + num, s.p, s.num);

	return temp;//여기서 복사 생성자가 호출되어야 하지만 RVO가 작동된다.
	//RVO(Return Value Optimization) - 반환값 최적화
}

//2023.11.16 free function
STRING operator+(const char* p, const STRING& s)
{
	STRING temp;
	temp.num = strlen(p) + s.num;
	temp.p=new char[temp.num];

	memcpy(temp.p, p, strlen(p));
	memcpy(temp.p + strlen(p), s.p, s.num);

	return temp;
}

//2023.11.16
char STRING::operator[](int idx)const
{
	return p[idx];
}

char& STRING::operator[](int idx)
{
	return p[idx];
}


size_t STRING::size() const 
{
	return num;
}

void STRING::show() const 
{
	for (int i{}; i < num; ++i)
		std::cout << p[i];
	std::cout << std::endl;
}

//2023.11.16
std::ostream& operator<<(std::ostream& os, const STRING& s)
{
	for (int i{}; i < s.num; ++i)
		os << s.p[i];
	return os;
}




=====================================================
저장한 시간 : 2023-11-16 목요일 오후 4:50:59
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()



//---------
int main()
//---------
{
	int n = 100;

	++n;

	cout << n << endl;

	save("STRING.h");
	save("STRING.cpp");

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 5:00:30
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

class INT {
	int data{};
public:
	INT() = default;
	INT(int v):data{v}{}
	
	friend ostream& operator<<(ostream& os,INT i) {//레퍼런스 붙이는게 8바이트, 그래서 그냥 복사해서 쓴다 레퍼런스 떼고
		return os << i.data;
	}
};

//---------
int main()
//---------
{
	INT n = 100;
	cout << n << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 5:00:55
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

class INT {
	int data{};
public:
	INT() = default;
	INT(int v):data{v}{}
	
	//friend 안 붙이면 함수 인자가 너무 많다라고 하면서 빨간 줄이 뜹니다.
	friend ostream& operator<<(ostream& os,INT i) {//레퍼런스 붙이는게 8바이트, 그래서 그냥 복사해서 쓴다 레퍼런스 떼고
		return os << i.data;
	}
};

//---------
int main()
//---------
{
	INT n = 100;
	cout << n << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 5:08:29
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

class INT {
	int data{};
public:
	INT() = default;
	INT(int v):data{v}{}

	INT& operator++() {//const 붙이면 안돼, n을 100에서 101로 바꿀거라서
		++data;
		return *this;
	}
	
	//friend 안 붙이면 함수 인자가 너무 많다라고 하면서 빨간 줄이 뜹니다.
	friend ostream& operator<<(ostream& os,INT i) {//레퍼런스 붙이는게 8바이트, 그래서 그냥 복사해서 쓴다 레퍼런스 떼고
		return os << i.data;
	}
};

//---------
int main()
//---------
{
	INT n = 100;
	++n;
	INT x = n.operator++();
	cout << x << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 5:08:57
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

class INT {
	int data{};
public:
	INT() = default;
	INT(int v):data{v}{}

	INT& operator++() {//const 붙이면 안돼, n을 100에서 101로 바꿀거라서
		++data;
		return *this;
	}
	
	//friend 안 붙이면 함수 인자가 너무 많다라고 하면서 빨간 줄이 뜹니다.
	friend ostream& operator<<(ostream& os,INT i) {//레퍼런스 붙이는게 8바이트, 그래서 그냥 복사해서 쓴다 레퍼런스 떼고
		return os << i.data;
	}
};

//---------
int main()
//---------
{
	INT n = 100;
	
	INT x = ++++++++++++ ++ ++n;
	cout << x << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 5:17:13
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

class INT {
	int data{};
public:
	INT() = default;
	INT(int v):data{v}{}

	INT operator++(int) {//후위증가 코딩=>임시 객체이기때문에 INT에 레퍼런스가 붙지X
		INT temp{ *this };//현재의 나를 저장한다
		++(*this);//나를 1 증가 시킨다
		return temp;//저장한 나를 return
	}

	INT& operator++() {//const 붙이면 안돼, n을 100에서 101로 바꿀거라서
		++data;
		return *this;
	}
	
	//friend 안 붙이면 함수 인자가 너무 많다라고 하면서 빨간 줄이 뜹니다.
	friend ostream& operator<<(ostream& os,INT i) {//레퍼런스 붙이는게 8바이트, 그래서 그냥 복사해서 쓴다 레퍼런스 떼고
		return os << i.data;
	}
};

//---------
int main()
//---------
{
	
	INT n = 100;
	
	INT x = n++;

	cout << x << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 5:17:32
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

class INT {
	int data{};
public:
	INT() = default;
	INT(int v):data{v}{}

	INT operator++(int) {//후위증가 코딩=>임시 객체이기때문에 INT에 레퍼런스가 붙지X
		INT temp{ *this };//현재의 나를 저장한다
		++(*this);//나를 1 증가 시킨다
		return temp;//저장한 나를 return
	}

	INT& operator++() {//const 붙이면 안돼, n을 100에서 101로 바꿀거라서
		++data;
		return *this;
	}
	
	//friend 안 붙이면 함수 인자가 너무 많다라고 하면서 빨간 줄이 뜹니다.
	friend ostream& operator<<(ostream& os,INT i) {//레퍼런스 붙이는게 8바이트, 그래서 그냥 복사해서 쓴다 레퍼런스 떼고
		return os << i.data;
	}
};

//---------
int main()
//---------
{
	
	INT n = 100;
	
	INT x = n++ ++ ++ ++;

	cout << x << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 5:18:35
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

class INT {
	int data{};
public:
	INT() = default;
	INT(int v):data{v}{}

	INT operator++(int) {//후위증가 코딩=>임시 객체이기때문에 INT에 레퍼런스가 붙지X
		INT temp{ *this };//현재의 나를 저장한다
		++(*this);//나를 1 증가 시킨다
		return temp;//저장한 나를 return
	}

	INT& operator++() {//const 붙이면 안돼, n을 100에서 101로 바꿀거라서
		++data;
		return *this;
	}
	
	//friend 안 붙이면 함수 인자가 너무 많다라고 하면서 빨간 줄이 뜹니다.
	friend ostream& operator<<(ostream& os,INT i) {//레퍼런스 붙이는게 8바이트, 그래서 그냥 복사해서 쓴다 레퍼런스 떼고
		return os << i.data;
	}
};

//---------
int main()
//---------
{
	
	INT n = 100;
	
	INT x = n++ ++ ++ ++;//이거 컴파일 안 되게 방지하기***?

	cout << x << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-16 목요일 오후 5:19:04
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.16 (11주 2일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - user-defined data type
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//++, ()

class INT {
	int data{};
public:
	INT() = default;
	INT(int v):data{v}{}

	INT operator++(int) {//후위증가 코딩=>임시 객체이기때문에 INT에 레퍼런스가 붙지X
		INT temp{ *this };//현재의 나를 저장한다
		++(*this);//나를 1 증가 시킨다
		return temp;//저장한 나를 return
	}

	INT& operator++() {//const 붙이면 안돼, n을 100에서 101로 바꿀거라서
		++data;
		return *this;
	}
	
	//friend 안 붙이면 함수 인자가 너무 많다라고 하면서 빨간 줄이 뜹니다.
	friend ostream& operator<<(ostream& os,INT i) {//레퍼런스 붙이는게 8바이트, 그래서 그냥 복사해서 쓴다 레퍼런스 떼고
		return os << i.data;
	}
};

//---------
int main()
//---------
{
	
	INT n = 100;
	
	INT x = n++ ++ ++ ++;//이거 컴파일 안 되게 방지하기***?
	//more effective c++의 한 챕터에 소개되어있는 이슈
	cout << x << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 5:51:38
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 함수호출 연산자() 오버로딩
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//함수란 무엇인가.
//함수 이름은 무엇인가.

void f(int n)
{
	cout << "전달 받은 값 - " << n << endl;
}

//---------
int main()
//---------
{
	f(100);

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 5:52:44
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 함수호출 연산자() 오버로딩
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//함수란 무엇인가.
//함수 이름은 무엇인가.

void f(int n)
{
	cout << "전달 받은 값 - " << n << endl;
}

//---------
int main()
//---------
{
	f(100);//f는 시작 번지이고 원래는 (*f)(100)이게 정식 형태이다.
	(*f)(100);

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 5:57:29
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 함수호출 연산자() 오버로딩
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//함수란 무엇인가.
//함수 이름은 무엇인가.

void f(int n)
{
	cout << "전달 받은 값 - " << n << endl;
}

//---------
int main()
//---------
{
	//1. int[10] a; 자료형이 있으면 오른쪽에 네임을 적는 것이다. 원래는!

	void (*a)(int) = f;

	a(1234);

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:06:12
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 함수호출 연산자() 오버로딩
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//함수란 무엇인가. - 
//함수 이름은 무엇인가. - 시작번지

void f(int n)
{
	cout << "전달 받은 값 - " << n << endl;
}

//---------
int main()
//---------
{
	//1. int[10] a; 자료형이 있으면 오른쪽에 네임을 적는 것이다. 원래는!

	void (*a)(int) = f;//번지를 저장하는 모든 데이터 타입의 크기는 전부 포인터 크기라 8byte이다.

	cout << "함수 포인터의 크기 - " << sizeof(a) << endl;
	cout << "함수 포인터의 타입 - " << typeid(a).name() << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:07:29
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 함수호출 연산자() 오버로딩
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//함수란 무엇인가. - 
//함수 이름은 무엇인가. - 시작번지

void f(int n)
{
	cout << "전달 받은 값 - " << n << endl;
}

//---------
int main()
//---------
{
	//1. int[10] a; 자료형이 있으면 오른쪽에 네임을 적는 것이다. 원래는!

	void (*a)(int) = f;//번지를 저장하는 모든 데이터 타입의 크기는 전부 포인터 크기라 8byte이다.

	cout << "함수 포인터의 크기 - " << sizeof(a) << endl;
	cout << "함수 포인터의 타입 - " << typeid(a).name() << endl;//_로 시작하는 변수를 선언하면 안 된다. c형식

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:12:04
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 함수호출 연산자() 오버로딩
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//호출가능한 것은 함수만이 아닙니다
//1. 함수
//2. 이름 없는 함수 lambda
//3. 함수를 가리키는 포인터 - function pointer(실시간의 기능 전환)

class Dog {
public:
	void operator()(int n) const{//연산자 함수는 멤버이기 때문에 필요하다면 const를 붙입니다.
		cout << "나는 Dog인데... " << n << endl;
	}
};

//---------
int main()
//---------
{
	Dog dog;

	dog.operator()(100);

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:12:38
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 함수호출 연산자() 오버로딩
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//호출가능한 것은 함수만이 아닙니다
//1. 함수
//2. 이름 없는 함수 lambda
//3. 함수를 가리키는 포인터 - function pointer(실시간의 기능 전환)

class Dog {
public:
	void operator()(int n) const{//연산자 함수는 멤버이기 때문에 필요하다면 const를 붙입니다.
		cout << "나는 Dog인데... " << n << endl;
	}
};

//---------
int main()
//---------
{
	Dog dog;

	dog(100);//이렇게 써도 된다.

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:14:59
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 함수호출 연산자() 오버로딩
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//호출가능한 것은 함수만이 아닙니다
//1. 함수
//2. 이름 없는 함수 lambda
//3. 함수를 가리키는 포인터 - function pointer(실시간의 기능 전환)
//4. 함수 호출 연산자를 오버로딩한 클래스 객체 - function object(functor)

class Dog {
public:
	void operator()(int n) const{//연산자 함수는 멤버이기 때문에 필요하다면 const를 붙입니다.
		cout << "나는 Dog인데... " << n << endl;
	}
};

//---------
int main()
//---------
{
	Dog f;

	f(100);//이렇게 써도 된다.

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:26:03
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include "save.h"
#include"STRING.h"
using namespace std;

//호출가능한 것은 함수만이 아닙니다
//1. 함수
//2. 이름 없는 함수 lambda
//3. 함수를 가리키는 포인터 - function pointer(실시간의 기능 전환)
//4. 함수 호출 연산자를 오버로딩한 클래스 객체 - function object(functor)

class Dog {
public:
	void operator()(int n) const{//연산자 함수는 멤버이기 때문에 필요하다면 const를 붙입니다.
		cout << "나는 Dog인데... " << n << endl;
	}
};

//---------
int main()
//---------
{
	Dog f;

	f(100);//호출 가능한 타입(callable type)
	//function<>으로 천하통일

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:37:43
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
#include"STRING.h"
using namespace std;

random_device rd;
default_random_engine dre{ rd() };
uniform_int_distribution uid{ 0,999 };

int id{};

class Dog {
	int age;
	string name;

public:
	Dog() {
		age = uid(dre);
		//name = "도그-" + ++id + "호"s;//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
		name = "도그-" + ++id + string("호");//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		os << "나이: " << dog.age << "살, 이름: " << dog.name << endl;
		return os;
	}
};

//---------
int main()
//---------
{
	Dog dog;//이름과 나이를 알아서 만들자

	//cout << dog << endl;
	cout << (cout,dog) << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:38:46
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include "save.h"
#include"STRING.h"
using namespace std;

random_device rd;
default_random_engine dre{ rd() };
uniform_int_distribution uid{ 0,999 };

int id{};

class Dog {
	int age;
	string name;

public:
	Dog() {
		age = uid(dre);
		//name = "도그-" + ++id + "호"s;//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
		name = "도그-" + ++id + string("호");//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		os << "나이: " << dog.age << "살, 이름: " << dog.name << endl;
		return os;
	}
};

//---------
int main()
//---------
{
	Dog dogs[20];

	for (const Dog& dog : dogs)
		cout << dog << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:40:43
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;

random_device rd;
default_random_engine dre{ rd() };
uniform_int_distribution uid{ 0,999 };

int id{};

class Dog {
	int age;
	string name;

public:
	Dog() {
		age = uid(dre);//itoa 인티저 투 아스키->c++에선 안 쓴다.
		name = "도그-" + to_string(++id) + string("호");//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		os << "나이: " << dog.age << "살, 이름: " << dog.name << endl;
		return os;
	}
};

//---------
int main()
//---------
{
	Dog dogs[20];

	for (const Dog& dog : dogs)
		cout << dog << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:40:57
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;

random_device rd;
default_random_engine dre{ rd() };
uniform_int_distribution uid{ 0,999 };

int id{};

class Dog {
	int age;
	string name;

public:
	Dog() {
		age = uid(dre);//itoa 인티저 투 아스키->c++에선 안 쓴다.
		name = "도그-" + to_string(++id) + string("호");//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		os << "나이: " << dog.age << "살, 이름: " << dog.name ;
		return os;
	}
};

//---------
int main()
//---------
{
	Dog dogs[20];

	for (const Dog& dog : dogs)
		cout << dog << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:41:12
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;

random_device rd;
default_random_engine dre{ rd() };
uniform_int_distribution uid{ 0,99};

int id{};

class Dog {
	int age;
	string name;

public:
	Dog() {
		age = uid(dre);//itoa 인티저 투 아스키->c++에선 안 쓴다.
		name = "도그-" + to_string(++id) + string("호");//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		os << "나이: " << dog.age << "살, 이름: " << dog.name;
		return os;
	}
};

//---------
int main()
//---------
{
	Dog dogs[20];

	for (const Dog& dog : dogs)
		cout << dog << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:43:57
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<string>
#include<fstream>
#include "save.h"
#include"STRING.h"
using namespace std;

random_device rd;
default_random_engine dre{ rd() };
uniform_int_distribution uid{ 0,99};

int id{};

class Dog {
	int age;
	string name;

public:
	Dog() {
		age = uid(dre);//itoa 인티저 투 아스키->c++에선 안 쓴다.
		name = "도그-" + to_string(++id) + string("호");//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		os << "나이: " << dog.age << "살, 이름: " << dog.name;
		return os;
	}
};

//---------
int main()
//---------
{
	Dog dogs[20];

	//Dog 20마리 정보를 파일에 기록하라,쓸거다 out, 읽을거다 in
	ofstream out{ "개20마리.txt" };

	for (const Dog& dog : dogs)
		out << dog << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:51:38
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<string>
#include<fstream>
#include "save.h"
#include"STRING.h"
using namespace std;

random_device rd;
default_random_engine dre{ rd() };
uniform_int_distribution uid{ 0,99};

int id{};

class Dog {
	int age;
	string name;

public:
	Dog() {
		age = uid(dre);//itoa 인티저 투 아스키->c++에선 안 쓴다.
		name = "도그-" + to_string(++id) + string("호");//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
	}

	void show()const {
		cout << "나이 : " << age << "살, 이름 : " << endl;
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.age << '\t' << dog.name << '\n';
	}
};

//메모리를 그대로 적는 방식은
//text binary 두 가지 방식


//---------
int main()
//---------
{
	Dog dogs[20];

	//Dog 20마리 정보를 파일에 기록하라,쓸거다 out, 읽을거다 in
	ofstream out{ "개20마리.txt" };

	for (const Dog& dog : dogs)
		out << dog << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 6:52:11
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<random>
#include<string>
#include<fstream>
#include "save.h"
#include"STRING.h"
using namespace std;

random_device rd;
default_random_engine dre{ rd() };
uniform_int_distribution uid{ 0,99};

int id{};

class Dog {
	int age;
	string name;

public:
	Dog() {
		age = uid(dre);//itoa 인티저 투 아스키->c++에선 안 쓴다.
		name = "도그-" + to_string(++id) + string("호");//전역 함수가 없기에 오른쪽 호에서 빨간 줄이 난다. 호가 const char*이기 때문
	}

	void show()const {
		cout << "나이 : " << age << "살, 이름 : " << endl;
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.age << '\t' << dog.name << '\t';
	}
};

//메모리를 그대로 적는 방식은
//text binary 두 가지 방식


//---------
int main()
//---------
{
	Dog dogs[20];

	//Dog 20마리 정보를 파일에 기록하라,쓸거다 out, 읽을거다 in
	ofstream out{ "개20마리.txt" };

	for (const Dog& dog : dogs)
		out << dog << endl;

	save("소스.cpp");
}



=====================================================
저장한 시간 : 2023-11-22 수요일 오후 7:03:37
=====================================================

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
//2023.2학기 c++ 11.22 (12주 1일)
// 
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 사용자 정의 자료형 - 파일에 쓰고 읽기
// ----------------------------------------------------------------------------------------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들어 반복연습
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<fstream>
#include<string>
#include "save.h"
#include"STRING.h"
using namespace std;

//***시험
//[문제] "개20마리.txt" 파일에 class Dog 객체 20개의 정보를 
// 연산자 <<를 사용하여 기록하였다.
//읽어서 나이 오름차순으로 정렬한 후 화면에 출력하라.
//클래스가 어떤 멤버를 갖고 있는지 정보를 알아야 이 문제를 풀 수 있다.

//class Dog {
//	int age;
//	string name;
//	
//	friend ostream& operator<<(ostream& os, const Dog& d) {
//		os << dog.age << '\t' << dog.name << '\t';
//		return os;
//	}
//};
//이 정보를 갖고 문제 해결

class Dog {
	int age;
	string name;

public:
	friend istream& operator>>(istream& is, Dog& d) {
		is >> d.age >> d.name;
		return is;
	}

	friend ostream& operator<<(ostream& os, const Dog& d) {//파일 저장을 할게 아니라서 나이: 이런식으로 출력해도 된다.
		os << "나이 : "<<d.age << '\t' << "이름 : " << d.name << '\t';
		return os;
	}
};

//---------
int main()
//---------
{
	Dog dog;
	ifstream in{ "개20마리.txt" };

	if (not in) {
		cout << "파일 읽기 실패" << endl;
		return 0;
	}

	in >> dog;

	cout << dog;

	save("소스.cpp");
}

