//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 2023.2학기 c++ 12.06 (14주 1일)
// 12 13 기말 시험
// 12 14 종강, 한학기정리 12 18성적 게시e315
//-----------------------------------------------------------------------------------------------------------------------------------------------------------
// 템플릿 - STL
// ----------------------------------------------------------------------------------------------------------------------------------------------------------


#include <iostream>
#include<algorithm>
#include "STRING.h"
#include "save.h"
using namespace std;

//템플릿 - C++언어에서 generic programming(일반적 프로그래밍)을 하기 위한 핵심 키워드(도구)
// -> 자료형에 무관한 함수와 클래스를 만들 수 있다.

//왜 필요한가? - 자료형이 다를 때마다 같은 코딩을 한다고? -> 컴파일러가 생성하게 하자

//단점 - 어렵다
//장점 - 소스코드를 생성한다는 것 때문에 일반함수보다 템플릿 함수가 훨씬 빠르게 실행된다.


//---------
int main()
//---------
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	qsort(a, 10, 4, [](const void* a, const void* b) {
		return *(int*)a - *(int*)b;
		});

//	sort(&a[0],&a[10]);//이 코드가 퀵소트보다 빠르다. 이유는?

	for (int n : a)
		cout << n << ' ';
	cout << endl;

	save("소스.cpp");
}

